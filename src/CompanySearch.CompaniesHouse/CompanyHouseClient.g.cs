//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace CompanySearch.CompaniesHouse
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompanyHouseClient 
    {
        private string _baseUrl = "https://api.company-information.service.gov.uk";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public CompanyHouseClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Registered Office Address
        /// </summary>
        /// <remarks>
        /// Get the current address of a company
        /// </remarks>
        /// <param name="company_number">Company number for registered office address</param>
        /// <returns>Successful response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RegisteredOfficeAddress> RegisteredOfficeAddressAsync(string company_number)
        {
            return RegisteredOfficeAddressAsync(company_number, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Registered Office Address
        /// </summary>
        /// <remarks>
        /// Get the current address of a company
        /// </remarks>
        /// <param name="company_number">Company number for registered office address</param>
        /// <returns>Successful response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RegisteredOfficeAddress> RegisteredOfficeAddressAsync(string company_number, System.Threading.CancellationToken cancellationToken)
        {
            if (company_number == null)
                throw new System.ArgumentNullException("company_number");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/company/{companyNumber}/registered-office-address");
            urlBuilder_.Replace("{company_number}", System.Uri.EscapeDataString(ConvertToString(company_number, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RegisteredOfficeAddress>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not authorised", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Resource not found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Company profile
        /// </summary>
        /// <remarks>
        /// Get the basic company information
        /// </remarks>
        /// <param name="company_number">The company number of the basic information to return.</param>
        /// <returns>readCompanyProfile</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CompanyProfile> CompanyAsync(string company_number)
        {
            return CompanyAsync(company_number, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Company profile
        /// </summary>
        /// <remarks>
        /// Get the basic company information
        /// </remarks>
        /// <param name="company_number">The company number of the basic information to return.</param>
        /// <returns>readCompanyProfile</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CompanyProfile> CompanyAsync(string company_number, System.Threading.CancellationToken cancellationToken)
        {
            if (company_number == null)
                throw new System.ArgumentNullException("company_number");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/company/{companyNumber}");
            urlBuilder_.Replace("{company_number}", System.Uri.EscapeDataString(ConvertToString(company_number, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CompanyProfile>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorised", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Resource not found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search All
        /// </summary>
        /// <remarks>
        /// Search companies, officers and disqualified officers
        /// </remarks>
        /// <param name="q">The term being searched for.</param>
        /// <param name="items_per_page">The number of search results to return per page.</param>
        /// <param name="start_index">The index of the first result item to return.</param>
        /// <returns>Search all</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Search> SearchAsync(string q, int? items_per_page, int? start_index)
        {
            return SearchAsync(q, items_per_page, start_index, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search All
        /// </summary>
        /// <remarks>
        /// Search companies, officers and disqualified officers
        /// </remarks>
        /// <param name="q">The term being searched for.</param>
        /// <param name="items_per_page">The number of search results to return per page.</param>
        /// <param name="start_index">The index of the first result item to return.</param>
        /// <returns>Search all</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Search> SearchAsync(string q, int? items_per_page, int? start_index, System.Threading.CancellationToken cancellationToken)
        {
            if (q == null)
                throw new System.ArgumentNullException("q");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/search?");
            urlBuilder_.Append(System.Uri.EscapeDataString("q") + "=").Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (items_per_page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("items_per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(items_per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start_index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start_index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start_index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Search>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not authorised", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search companies
        /// </summary>
        /// <remarks>
        /// Search company information
        /// </remarks>
        /// <param name="q">The term being searched for.</param>
        /// <param name="items_per_page">The number of search results to return per page.</param>
        /// <param name="start_index">The index of the first result item to return.</param>
        /// <param name="restrictions">Enumerable options to restrict search results. Space separate multiple restriction options to combine functionality. For a "company name availability" search use "active-companies legally-equivalent-company-name" together.</param>
        /// <returns>Search company</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CompanySearch> CompaniesAsync(string q, int? items_per_page, int? start_index, string restrictions)
        {
            return CompaniesAsync(q, items_per_page, start_index, restrictions, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search companies
        /// </summary>
        /// <remarks>
        /// Search company information
        /// </remarks>
        /// <param name="q">The term being searched for.</param>
        /// <param name="items_per_page">The number of search results to return per page.</param>
        /// <param name="start_index">The index of the first result item to return.</param>
        /// <param name="restrictions">Enumerable options to restrict search results. Space separate multiple restriction options to combine functionality. For a "company name availability" search use "active-companies legally-equivalent-company-name" together.</param>
        /// <returns>Search company</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CompanySearch> CompaniesAsync(string q, int? items_per_page, int? start_index, string restrictions, System.Threading.CancellationToken cancellationToken)
        {
            if (q == null)
                throw new System.ArgumentNullException("q");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/search/companies?");
            urlBuilder_.Append(System.Uri.EscapeDataString("q") + "=").Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (items_per_page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("items_per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(items_per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start_index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start_index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start_index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (restrictions != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("restrictions") + "=").Append(System.Uri.EscapeDataString(ConvertToString(restrictions, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CompanySearch>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not authorised", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search company officers
        /// </summary>
        /// <remarks>
        /// Search for officer information
        /// </remarks>
        /// <param name="q">The term being searched for.</param>
        /// <param name="items_per_page">The number of search results to return per page.</param>
        /// <param name="start_index">The index of the first result item to return.</param>
        /// <returns>Search officer</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<OfficerSearch> OfficersAsync(string q, int? items_per_page, int? start_index)
        {
            return OfficersAsync(q, items_per_page, start_index, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search company officers
        /// </summary>
        /// <remarks>
        /// Search for officer information
        /// </remarks>
        /// <param name="q">The term being searched for.</param>
        /// <param name="items_per_page">The number of search results to return per page.</param>
        /// <param name="start_index">The index of the first result item to return.</param>
        /// <returns>Search officer</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OfficerSearch> OfficersAsync(string q, int? items_per_page, int? start_index, System.Threading.CancellationToken cancellationToken)
        {
            if (q == null)
                throw new System.ArgumentNullException("q");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/search/officers?");
            urlBuilder_.Append(System.Uri.EscapeDataString("q") + "=").Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (items_per_page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("items_per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(items_per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start_index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start_index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start_index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OfficerSearch>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not authorised", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search disqualified officers
        /// </summary>
        /// <remarks>
        /// Search for disqualified officer information
        /// </remarks>
        /// <param name="q">The term being searched for.</param>
        /// <param name="items_per_page">The number of search results to return per page.</param>
        /// <param name="start_index">The index of the first result item to return.</param>
        /// <returns>Search all</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<DisqualifiedOfficerSearch> DisqualifiedOfficersAsync(string q, int? items_per_page, int? start_index)
        {
            return DisqualifiedOfficersAsync(q, items_per_page, start_index, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search disqualified officers
        /// </summary>
        /// <remarks>
        /// Search for disqualified officer information
        /// </remarks>
        /// <param name="q">The term being searched for.</param>
        /// <param name="items_per_page">The number of search results to return per page.</param>
        /// <param name="start_index">The index of the first result item to return.</param>
        /// <returns>Search all</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DisqualifiedOfficerSearch> DisqualifiedOfficersAsync(string q, int? items_per_page, int? start_index, System.Threading.CancellationToken cancellationToken)
        {
            if (q == null)
                throw new System.ArgumentNullException("q");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/search/disqualified-officers?");
            urlBuilder_.Append(System.Uri.EscapeDataString("q") + "=").Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (items_per_page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("items_per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(items_per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start_index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start_index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start_index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DisqualifiedOfficerSearch>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not authorised", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search for a dissolved company
        /// </summary>
        /// <remarks>
        /// Search for a dissolved company
        /// </remarks>
        /// <param name="q">The company name being searched for</param>
        /// <param name="search_type">Determines type of search. Options are alphabetical, best-match, previous-name-dissolved</param>
        /// <param name="search_above">The ordered_alpha_key_with_id used for alphabetical paging</param>
        /// <param name="search_below">The ordered_alpha_key_with_id used for alphabetical paging</param>
        /// <param name="size">The maximum number of results matching the search term(s) to return with a range of 1 to 100</param>
        /// <param name="start_index">Used in best-match and previous-name-dissolved search-type</param>
        /// <returns>A list of dissolved companies</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response> Companies2Async(string q, string search_type, string search_above, string search_below, string size, string start_index)
        {
            return Companies2Async(q, search_type, search_above, search_below, size, start_index, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for a dissolved company
        /// </summary>
        /// <remarks>
        /// Search for a dissolved company
        /// </remarks>
        /// <param name="q">The company name being searched for</param>
        /// <param name="search_type">Determines type of search. Options are alphabetical, best-match, previous-name-dissolved</param>
        /// <param name="search_above">The ordered_alpha_key_with_id used for alphabetical paging</param>
        /// <param name="search_below">The ordered_alpha_key_with_id used for alphabetical paging</param>
        /// <param name="size">The maximum number of results matching the search term(s) to return with a range of 1 to 100</param>
        /// <param name="start_index">Used in best-match and previous-name-dissolved search-type</param>
        /// <returns>A list of dissolved companies</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> Companies2Async(string q, string search_type, string search_above, string search_below, string size, string start_index, System.Threading.CancellationToken cancellationToken)
        {
            if (q == null)
                throw new System.ArgumentNullException("q");

            if (search_type == null)
                throw new System.ArgumentNullException("search_type");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/dissolved-search/companies?");
            urlBuilder_.Append(System.Uri.EscapeDataString("q") + "=").Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("search_type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(search_type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (search_above != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("search_above") + "=").Append(System.Uri.EscapeDataString(ConvertToString(search_above, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (search_below != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("search_below") + "=").Append(System.Uri.EscapeDataString(ConvertToString(search_below, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start_index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start_index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start_index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("No companies found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid size parameter, size must be greater than zero and not greater than 100", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search for a company
        /// </summary>
        /// <remarks>
        /// Search for a company
        /// </remarks>
        /// <param name="q">The company name being searched for</param>
        /// <param name="search_above">The ordered_alpha_key_with_id used for paging</param>
        /// <param name="search_below">The ordered_alpha_key_with_id used for paging</param>
        /// <param name="size">The maximum number of results matching the search term(s) to return with a range of 1 to 100</param>
        /// <returns>A list of companies</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response2> Companies3Async(string q, string search_above, string search_below, string size)
        {
            return Companies3Async(q, search_above, search_below, size, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for a company
        /// </summary>
        /// <remarks>
        /// Search for a company
        /// </remarks>
        /// <param name="q">The company name being searched for</param>
        /// <param name="search_above">The ordered_alpha_key_with_id used for paging</param>
        /// <param name="search_below">The ordered_alpha_key_with_id used for paging</param>
        /// <param name="size">The maximum number of results matching the search term(s) to return with a range of 1 to 100</param>
        /// <returns>A list of companies</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response2> Companies3Async(string q, string search_above, string search_below, string size, System.Threading.CancellationToken cancellationToken)
        {
            if (q == null)
                throw new System.ArgumentNullException("q");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/alphabetic-search/companies?");
            urlBuilder_.Append(System.Uri.EscapeDataString("q") + "=").Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (search_above != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("search_above") + "=").Append(System.Uri.EscapeDataString(ConvertToString(search_above, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (search_below != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("search_below") + "=").Append(System.Uri.EscapeDataString(ConvertToString(search_below, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("No companies found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid size parameter, size must be greater than zero and not greater than 100", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Advanced search for a company
        /// </summary>
        /// <remarks>
        /// Advanced search for a company
        /// </remarks>
        /// <param name="company_name_includes">The company name includes advanced search filter</param>
        /// <param name="company_name_excludes">The company name excludes advanced search filter</param>
        /// <param name="company_status">The company status advanced search filter. To search using multiple values, use a comma delimited list or multiple of the same key i.e. company_status=xxx&amp;company_status=yyy</param>
        /// <param name="company_subtype">The company subtype advanced search filter. To search using multiple values, use a comma delimited list or multiple of the same key i.e. company_subtype=xxx&amp;company_subtype=yyy</param>
        /// <param name="company_type">The company type advanced search filter. To search using multiple values, use a comma delimited list or multiple of the same key i.e. company_type=xxx&amp;company_type=yyy</param>
        /// <param name="dissolved_from">The dissolved from date advanced search filter</param>
        /// <param name="dissolved_to">The dissolved to date advanced search filter</param>
        /// <param name="incorporated_from">The incorporated from date advanced search filter</param>
        /// <param name="incorporated_to">The incorporated to date advanced search filter</param>
        /// <param name="location">The location advanced search filter</param>
        /// <param name="sic_codes">The SIC codes advanced search filter. To search using multiple values, use a comma delimited list or multiple of the same key i.e. sic_codes=xxx&amp;sic_codes=yyy</param>
        /// <param name="size">The maximum number of results matching the search term(s) to return with a range of 1 to 5000</param>
        /// <param name="start_index">The point at which results will start from i.e show search results from result 20 (used for paging)</param>
        /// <returns>A list of companies</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response3> Companies4Async(string company_name_includes, string company_name_excludes, System.Collections.Generic.IEnumerable<object> company_status, string company_subtype, System.Collections.Generic.IEnumerable<object> company_type, string dissolved_from, string dissolved_to, string incorporated_from, string incorporated_to, string location, System.Collections.Generic.IEnumerable<object> sic_codes, string size, string start_index)
        {
            return Companies4Async(company_name_includes, company_name_excludes, company_status, company_subtype, company_type, dissolved_from, dissolved_to, incorporated_from, incorporated_to, location, sic_codes, size, start_index, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Advanced search for a company
        /// </summary>
        /// <remarks>
        /// Advanced search for a company
        /// </remarks>
        /// <param name="company_name_includes">The company name includes advanced search filter</param>
        /// <param name="company_name_excludes">The company name excludes advanced search filter</param>
        /// <param name="company_status">The company status advanced search filter. To search using multiple values, use a comma delimited list or multiple of the same key i.e. company_status=xxx&amp;company_status=yyy</param>
        /// <param name="company_subtype">The company subtype advanced search filter. To search using multiple values, use a comma delimited list or multiple of the same key i.e. company_subtype=xxx&amp;company_subtype=yyy</param>
        /// <param name="company_type">The company type advanced search filter. To search using multiple values, use a comma delimited list or multiple of the same key i.e. company_type=xxx&amp;company_type=yyy</param>
        /// <param name="dissolved_from">The dissolved from date advanced search filter</param>
        /// <param name="dissolved_to">The dissolved to date advanced search filter</param>
        /// <param name="incorporated_from">The incorporated from date advanced search filter</param>
        /// <param name="incorporated_to">The incorporated to date advanced search filter</param>
        /// <param name="location">The location advanced search filter</param>
        /// <param name="sic_codes">The SIC codes advanced search filter. To search using multiple values, use a comma delimited list or multiple of the same key i.e. sic_codes=xxx&amp;sic_codes=yyy</param>
        /// <param name="size">The maximum number of results matching the search term(s) to return with a range of 1 to 5000</param>
        /// <param name="start_index">The point at which results will start from i.e show search results from result 20 (used for paging)</param>
        /// <returns>A list of companies</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response3> Companies4Async(string company_name_includes, string company_name_excludes, System.Collections.Generic.IEnumerable<object> company_status, string company_subtype, System.Collections.Generic.IEnumerable<object> company_type, string dissolved_from, string dissolved_to, string incorporated_from, string incorporated_to, string location, System.Collections.Generic.IEnumerable<object> sic_codes, string size, string start_index, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/advanced-search/companies?");
            if (company_name_includes != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("company_name_includes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(company_name_includes, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (company_name_excludes != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("company_name_excludes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(company_name_excludes, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (company_status != null)
            {
                foreach (var item_ in company_status) { urlBuilder_.Append(System.Uri.EscapeDataString("company_status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (company_subtype != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("company_subtype") + "=").Append(System.Uri.EscapeDataString(ConvertToString(company_subtype, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (company_type != null)
            {
                foreach (var item_ in company_type) { urlBuilder_.Append(System.Uri.EscapeDataString("company_type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (dissolved_from != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dissolved_from") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dissolved_from, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dissolved_to != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dissolved_to") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dissolved_to, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (incorporated_from != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("incorporated_from") + "=").Append(System.Uri.EscapeDataString(ConvertToString(incorporated_from, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (incorporated_to != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("incorporated_to") + "=").Append(System.Uri.EscapeDataString(ConvertToString(incorporated_to, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (location != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("location") + "=").Append(System.Uri.EscapeDataString(ConvertToString(location, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sic_codes != null)
            {
                foreach (var item_ in sic_codes) { urlBuilder_.Append(System.Uri.EscapeDataString("sic_codes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start_index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start_index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start_index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response3>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("No companies found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Company Officers
        /// </summary>
        /// <remarks>
        /// List of all company officers
        /// </remarks>
        /// <param name="company_number">The company number of the officer list being requested.</param>
        /// <param name="items_per_page">The number of officers to return per page.</param>
        /// <param name="register_type">The register_type determines which officer type is returned for the registers view.The register_type field will only work if registers_view is set to true</param>
        /// <param name="register_view">Display register specific information. If given register is held at Companies House, registers_view set to true and correct register_type specified, only active officers will be returned. Those will also have full date of birth.Defaults to false</param>
        /// <param name="start_index">The offset into the entire result set that this page starts.</param>
        /// <param name="order_by">The field by which to order the result set.</param>
        /// <returns>List the company officers</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<OfficerList> Officers2Async(string company_number, int? items_per_page, Register_type? register_type, Register_view? register_view, int? start_index, Order_by? order_by)
        {
            return Officers2Async(company_number, items_per_page, register_type, register_view, start_index, order_by, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Company Officers
        /// </summary>
        /// <remarks>
        /// List of all company officers
        /// </remarks>
        /// <param name="company_number">The company number of the officer list being requested.</param>
        /// <param name="items_per_page">The number of officers to return per page.</param>
        /// <param name="register_type">The register_type determines which officer type is returned for the registers view.The register_type field will only work if registers_view is set to true</param>
        /// <param name="register_view">Display register specific information. If given register is held at Companies House, registers_view set to true and correct register_type specified, only active officers will be returned. Those will also have full date of birth.Defaults to false</param>
        /// <param name="start_index">The offset into the entire result set that this page starts.</param>
        /// <param name="order_by">The field by which to order the result set.</param>
        /// <returns>List the company officers</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OfficerList> Officers2Async(string company_number, int? items_per_page, Register_type? register_type, Register_view? register_view, int? start_index, Order_by? order_by, System.Threading.CancellationToken cancellationToken)
        {
            if (company_number == null)
                throw new System.ArgumentNullException("company_number");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/company/{company_number}/officers?");
            urlBuilder_.Replace("{company_number}", System.Uri.EscapeDataString(ConvertToString(company_number, System.Globalization.CultureInfo.InvariantCulture)));
            if (items_per_page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("items_per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(items_per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (register_type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("register_type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(register_type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (register_view != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("register_view") + "=").Append(System.Uri.EscapeDataString(ConvertToString(register_view, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start_index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start_index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start_index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (order_by != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("order_by") + "=").Append(System.Uri.EscapeDataString(ConvertToString(order_by, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OfficerList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Schema9>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Schema9>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorised", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a company officer appointment
        /// </summary>
        /// <remarks>
        /// Get details of an individual company officer appointment
        /// </remarks>
        /// <param name="company_number">The company number of the officer list being requested.</param>
        /// <param name="appointment_id">The appointment id of the company officer appointment being requested.</param>
        /// <returns>Get a company officer appointment</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Schema8> AppointmentsAsync(string company_number, string appointment_id)
        {
            return AppointmentsAsync(company_number, appointment_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a company officer appointment
        /// </summary>
        /// <remarks>
        /// Get details of an individual company officer appointment
        /// </remarks>
        /// <param name="company_number">The company number of the officer list being requested.</param>
        /// <param name="appointment_id">The appointment id of the company officer appointment being requested.</param>
        /// <returns>Get a company officer appointment</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Schema8> AppointmentsAsync(string company_number, string appointment_id, System.Threading.CancellationToken cancellationToken)
        {
            if (company_number == null)
                throw new System.ArgumentNullException("company_number");

            if (appointment_id == null)
                throw new System.ArgumentNullException("appointment_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/company/{company_number}/appointments/{appointment_id}");
            urlBuilder_.Replace("{company_number}", System.Uri.EscapeDataString(ConvertToString(company_number, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{appointment_id}", System.Uri.EscapeDataString(ConvertToString(appointment_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Schema8>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Schema9>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Schema9>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorised", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Company registers
        /// </summary>
        /// <remarks>
        /// Get the company registers information
        /// </remarks>
        /// <param name="company_number">The company number of the register information to return.</param>
        /// <returns>readCompanyRegister</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CompanyRegister> RegistersAsync(string company_number)
        {
            return RegistersAsync(company_number, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Company registers
        /// </summary>
        /// <remarks>
        /// Get the company registers information
        /// </remarks>
        /// <param name="company_number">The company number of the register information to return.</param>
        /// <returns>readCompanyRegister</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CompanyRegister> RegistersAsync(string company_number, System.Threading.CancellationToken cancellationToken)
        {
            if (company_number == null)
                throw new System.ArgumentNullException("company_number");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/company/{company_number}/registers");
            urlBuilder_.Replace("{company_number}", System.Uri.EscapeDataString(ConvertToString(company_number, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CompanyRegister>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorised", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// filingHistoryItem resource
        /// </summary>
        /// <remarks>
        /// Get the filing history item of a company
        /// </remarks>
        /// <param name="company_number">The company number that the single filing is required for.</param>
        /// <param name="transaction_id">The transaction id that the filing history is required for.</param>
        /// <returns>Filing history items resource returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Schema11> FilingHistoryAsync(string company_number, string transaction_id)
        {
            return FilingHistoryAsync(company_number, transaction_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// filingHistoryItem resource
        /// </summary>
        /// <remarks>
        /// Get the filing history item of a company
        /// </remarks>
        /// <param name="company_number">The company number that the single filing is required for.</param>
        /// <param name="transaction_id">The transaction id that the filing history is required for.</param>
        /// <returns>Filing history items resource returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Schema11> FilingHistoryAsync(string company_number, string transaction_id, System.Threading.CancellationToken cancellationToken)
        {
            if (company_number == null)
                throw new System.ArgumentNullException("company_number");

            if (transaction_id == null)
                throw new System.ArgumentNullException("transaction_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/company/{company_number}/filing-history/{transaction_id}");
            urlBuilder_.Replace("{company_number}", System.Uri.EscapeDataString(ConvertToString(company_number, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{transaction_id}", System.Uri.EscapeDataString(ConvertToString(transaction_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Schema11>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Schema9>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Schema9>("Unauthorised", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Filing history not available for this company", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// filingHistoryList resource
        /// </summary>
        /// <remarks>
        /// Get the filing history list of a company
        /// </remarks>
        /// <param name="category">One or more comma-separated categories to filter by (inclusive).</param>
        /// <param name="company_number">The company number that the filing history is required for.</param>
        /// <param name="items_per_page">The number of filing history items to return per page.</param>
        /// <param name="start_index">The index into the entire result set that this result page starts.</param>
        /// <returns>Filing history items resource returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FilingHistoryList> FilingHistory2Async(string category, string company_number, int? items_per_page, int? start_index)
        {
            return FilingHistory2Async(category, company_number, items_per_page, start_index, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// filingHistoryList resource
        /// </summary>
        /// <remarks>
        /// Get the filing history list of a company
        /// </remarks>
        /// <param name="category">One or more comma-separated categories to filter by (inclusive).</param>
        /// <param name="company_number">The company number that the filing history is required for.</param>
        /// <param name="items_per_page">The number of filing history items to return per page.</param>
        /// <param name="start_index">The index into the entire result set that this result page starts.</param>
        /// <returns>Filing history items resource returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FilingHistoryList> FilingHistory2Async(string category, string company_number, int? items_per_page, int? start_index, System.Threading.CancellationToken cancellationToken)
        {
            if (company_number == null)
                throw new System.ArgumentNullException("company_number");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/company/{company_number}/filing-history?");
            urlBuilder_.Replace("{company_number}", System.Uri.EscapeDataString(ConvertToString(company_number, System.Globalization.CultureInfo.InvariantCulture)));
            if (category != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("category") + "=").Append(System.Uri.EscapeDataString(ConvertToString(category, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (items_per_page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("items_per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(items_per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start_index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start_index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start_index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FilingHistoryList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Schema9>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Schema9>("Unauthorised", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Filing history not available for this company", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Company exemptions information
        /// </remarks>
        /// <param name="company_number">The company number that the exemptions list is required for.</param>
        /// <returns>Successful response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CompanyExemptions> ExemptionsAsync(string company_number)
        {
            return ExemptionsAsync(company_number, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Company exemptions information
        /// </remarks>
        /// <param name="company_number">The company number that the exemptions list is required for.</param>
        /// <returns>Successful response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CompanyExemptions> ExemptionsAsync(string company_number, System.Threading.CancellationToken cancellationToken)
        {
            if (company_number == null)
                throw new System.ArgumentNullException("company_number");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/company/{company_number}/exemptions");
            urlBuilder_.Replace("{company_number}", System.Uri.EscapeDataString(ConvertToString(company_number, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CompanyExemptions>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorised", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Resource not found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get natural officers disqualifications
        /// </summary>
        /// <remarks>
        /// Get a natural officer's disqualifications
        /// </remarks>
        /// <param name="officer_id">The disqualified officer's id.</param>
        /// <returns>Natural officer's disqualifications returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<NaturalDisqualification> NaturalAsync(string officer_id)
        {
            return NaturalAsync(officer_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get natural officers disqualifications
        /// </summary>
        /// <remarks>
        /// Get a natural officer's disqualifications
        /// </remarks>
        /// <param name="officer_id">The disqualified officer's id.</param>
        /// <returns>Natural officer's disqualifications returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NaturalDisqualification> NaturalAsync(string officer_id, System.Threading.CancellationToken cancellationToken)
        {
            if (officer_id == null)
                throw new System.ArgumentNullException("officer_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/disqualified-officers/natural/{officer_id}");
            urlBuilder_.Replace("{officer_id}", System.Uri.EscapeDataString(ConvertToString(officer_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NaturalDisqualification>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorised", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Resource not found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a corporate officers disqualifications
        /// </summary>
        /// <remarks>
        /// Get a corporate officer's disqualifications
        /// </remarks>
        /// <param name="officer_id">The disqualified officer id.</param>
        /// <returns>Corporate officer's disqualifications returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CorporateDisqualification> CorporateAsync(string officer_id)
        {
            return CorporateAsync(officer_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a corporate officers disqualifications
        /// </summary>
        /// <remarks>
        /// Get a corporate officer's disqualifications
        /// </remarks>
        /// <param name="officer_id">The disqualified officer id.</param>
        /// <returns>Corporate officer's disqualifications returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CorporateDisqualification> CorporateAsync(string officer_id, System.Threading.CancellationToken cancellationToken)
        {
            if (officer_id == null)
                throw new System.ArgumentNullException("officer_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/disqualified-officers/corporate/{officer_id}");
            urlBuilder_.Replace("{officer_id}", System.Uri.EscapeDataString(ConvertToString(officer_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CorporateDisqualification>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorised", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Resource not found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Officer Appointment List
        /// </summary>
        /// <remarks>
        /// List of all officer appointments
        /// </remarks>
        /// <param name="officer_id">The officer id of the appointment list being requested.</param>
        /// <param name="items_per_page">The number of appointments to return per page.</param>
        /// <param name="start_index">The first row of data to retrieve, starting at 0. Use this parameter as a pagination mechanism along with the items_per_page parameter.</param>
        /// <returns>List the officer appointments</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AppointmentList> Appointments2Async(string officer_id, int? items_per_page, int? start_index)
        {
            return Appointments2Async(officer_id, items_per_page, start_index, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Officer Appointment List
        /// </summary>
        /// <remarks>
        /// List of all officer appointments
        /// </remarks>
        /// <param name="officer_id">The officer id of the appointment list being requested.</param>
        /// <param name="items_per_page">The number of appointments to return per page.</param>
        /// <param name="start_index">The first row of data to retrieve, starting at 0. Use this parameter as a pagination mechanism along with the items_per_page parameter.</param>
        /// <returns>List the officer appointments</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AppointmentList> Appointments2Async(string officer_id, int? items_per_page, int? start_index, System.Threading.CancellationToken cancellationToken)
        {
            if (officer_id == null)
                throw new System.ArgumentNullException("officer_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/officers/{officer_id}/appointments?");
            urlBuilder_.Replace("{officer_id}", System.Uri.EscapeDataString(ConvertToString(officer_id, System.Globalization.CultureInfo.InvariantCulture)));
            if (items_per_page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("items_per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(items_per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start_index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start_index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start_index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AppointmentList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorised", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Charges
        /// </summary>
        /// <remarks>
        /// List of charges for a company.
        /// </remarks>
        /// <param name="company_number">The company number that the charge list is required for.</param>
        /// <param name="items_per_page">The number of charges to return per page.</param>
        /// <param name="start_index">The index into the entire result set that this result page starts.</param>
        /// <returns>Resource returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ChargeList> ChargesAsync(string company_number, int? items_per_page, int? start_index)
        {
            return ChargesAsync(company_number, items_per_page, start_index, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Charges
        /// </summary>
        /// <remarks>
        /// List of charges for a company.
        /// </remarks>
        /// <param name="company_number">The company number that the charge list is required for.</param>
        /// <param name="items_per_page">The number of charges to return per page.</param>
        /// <param name="start_index">The index into the entire result set that this result page starts.</param>
        /// <returns>Resource returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ChargeList> ChargesAsync(string company_number, int? items_per_page, int? start_index, System.Threading.CancellationToken cancellationToken)
        {
            if (company_number == null)
                throw new System.ArgumentNullException("company_number");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/company/{company_number}/charges?");
            urlBuilder_.Replace("{company_number}", System.Uri.EscapeDataString(ConvertToString(company_number, System.Globalization.CultureInfo.InvariantCulture)));
            if (items_per_page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("items_per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(items_per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start_index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start_index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start_index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ChargeList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorised", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Resource not found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Individual charge information for company.
        /// </remarks>
        /// <param name="company_number">The company number that the charge is required for.</param>
        /// <param name="charge_id">The id of the charge details that are required.</param>
        /// <returns>Resource returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Schema17> Charges2Async(string company_number, string charge_id)
        {
            return Charges2Async(company_number, charge_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Individual charge information for company.
        /// </remarks>
        /// <param name="company_number">The company number that the charge is required for.</param>
        /// <param name="charge_id">The id of the charge details that are required.</param>
        /// <returns>Resource returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Schema17> Charges2Async(string company_number, string charge_id, System.Threading.CancellationToken cancellationToken)
        {
            if (company_number == null)
                throw new System.ArgumentNullException("company_number");

            if (charge_id == null)
                throw new System.ArgumentNullException("charge_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/company/{company_number}/charges/{charge_id}");
            urlBuilder_.Replace("{company_number}", System.Uri.EscapeDataString(ConvertToString(company_number, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{charge_id}", System.Uri.EscapeDataString(ConvertToString(charge_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Schema17>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorised", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Resource not found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Company insolvency information
        /// </remarks>
        /// <param name="company_number">The company number of the basic information to return.</param>
        /// <returns>Company insolvency resource returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CompanyInsolvency> InsolvencyAsync(string company_number)
        {
            return InsolvencyAsync(company_number, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Company insolvency information
        /// </remarks>
        /// <param name="company_number">The company number of the basic information to return.</param>
        /// <returns>Company insolvency resource returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CompanyInsolvency> InsolvencyAsync(string company_number, System.Threading.CancellationToken cancellationToken)
        {
            if (company_number == null)
                throw new System.ArgumentNullException("company_number");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/company/{company_number}/insolvency");
            urlBuilder_.Replace("{company_number}", System.Uri.EscapeDataString(ConvertToString(company_number, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CompanyInsolvency>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Resource not found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Company UK Establishments
        /// </summary>
        /// <remarks>
        /// List of uk-establishments companies
        /// </remarks>
        /// <param name="company_number">Company number</param>
        /// <returns>Resource returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CompanyUKEstablishments> UkEstablishmentsAsync(string company_number)
        {
            return UkEstablishmentsAsync(company_number, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Company UK Establishments
        /// </summary>
        /// <remarks>
        /// List of uk-establishments companies
        /// </remarks>
        /// <param name="company_number">Company number</param>
        /// <returns>Resource returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CompanyUKEstablishments> UkEstablishmentsAsync(string company_number, System.Threading.CancellationToken cancellationToken)
        {
            if (company_number == null)
                throw new System.ArgumentNullException("company_number");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/company/{company_number}/uk-establishments");
            urlBuilder_.Replace("{company_number}", System.Uri.EscapeDataString(ConvertToString(company_number, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CompanyUKEstablishments>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorised", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List the company persons with significant control
        /// </summary>
        /// <remarks>
        /// List of all persons with significant control (not statements)
        /// </remarks>
        /// <param name="company_number">The company number of the persons with significant control list being requested.</param>
        /// <param name="items_per_page">The number of persons with significant control to return per page.</param>
        /// <param name="start_index">The offset into the entire result set that this page starts.</param>
        /// <param name="register_view">Display register specific information. If register is held at Companies House and register_view is set to true, only PSCs which are active or were terminated during election period are shown together with full dates of birth where available. Accepted values are: -`true`  
        /// <br/> -`false`  
        /// <br/> Defaults to false.</param>
        /// <returns>readCompanyProfile</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<List> PersonsWithSignificantControlAsync(string company_number, string items_per_page, string start_index, string register_view)
        {
            return PersonsWithSignificantControlAsync(company_number, items_per_page, start_index, register_view, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List the company persons with significant control
        /// </summary>
        /// <remarks>
        /// List of all persons with significant control (not statements)
        /// </remarks>
        /// <param name="company_number">The company number of the persons with significant control list being requested.</param>
        /// <param name="items_per_page">The number of persons with significant control to return per page.</param>
        /// <param name="start_index">The offset into the entire result set that this page starts.</param>
        /// <param name="register_view">Display register specific information. If register is held at Companies House and register_view is set to true, only PSCs which are active or were terminated during election period are shown together with full dates of birth where available. Accepted values are: -`true`  
        /// <br/> -`false`  
        /// <br/> Defaults to false.</param>
        /// <returns>readCompanyProfile</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<List> PersonsWithSignificantControlAsync(string company_number, string items_per_page, string start_index, string register_view, System.Threading.CancellationToken cancellationToken)
        {
            if (company_number == null)
                throw new System.ArgumentNullException("company_number");

            if (items_per_page == null)
                throw new System.ArgumentNullException("items_per_page");

            if (start_index == null)
                throw new System.ArgumentNullException("start_index");

            if (register_view == null)
                throw new System.ArgumentNullException("register_view");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/company/{company_number}/persons-with-significant-control?");
            urlBuilder_.Replace("{company_number}", System.Uri.EscapeDataString(ConvertToString(company_number, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("items_per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(items_per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("start_index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start_index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("register_view") + "=").Append(System.Uri.EscapeDataString(ConvertToString(register_view, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<List>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorised", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Resource not found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the individual person with significant control
        /// </summary>
        /// <remarks>
        /// Get details of an individual person with significant control
        /// </remarks>
        /// <param name="company_number">The company number of the person with significant control details being requested.</param>
        /// <param name="psc_id">The id of the person with significant control details being requested.</param>
        /// <returns>IndividualPSC resource returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Individual> IndividualAsync(string company_number, string psc_id)
        {
            return IndividualAsync(company_number, psc_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the individual person with significant control
        /// </summary>
        /// <remarks>
        /// Get details of an individual person with significant control
        /// </remarks>
        /// <param name="company_number">The company number of the person with significant control details being requested.</param>
        /// <param name="psc_id">The id of the person with significant control details being requested.</param>
        /// <returns>IndividualPSC resource returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Individual> IndividualAsync(string company_number, string psc_id, System.Threading.CancellationToken cancellationToken)
        {
            if (company_number == null)
                throw new System.ArgumentNullException("company_number");

            if (psc_id == null)
                throw new System.ArgumentNullException("psc_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/company/{company_number}/persons-with-significant-control/individual/{psc_id}");
            urlBuilder_.Replace("{company_number}", System.Uri.EscapeDataString(ConvertToString(company_number, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{psc_id}", System.Uri.EscapeDataString(ConvertToString(psc_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Individual>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorised", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Resource not found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the individual beneficial owner
        /// </summary>
        /// <remarks>
        /// Get details of an individual beneficial owner
        /// </remarks>
        /// <param name="company_number">The company number of the beneficial owner details being requested.</param>
        /// <param name="psc_id">The id of the beneficial owner details being requested.</param>
        /// <returns>IndividualBO resource returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IndividualBeneficialOwner> IndividualBeneficialOwnerAsync(string company_number, string psc_id)
        {
            return IndividualBeneficialOwnerAsync(company_number, psc_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the individual beneficial owner
        /// </summary>
        /// <remarks>
        /// Get details of an individual beneficial owner
        /// </remarks>
        /// <param name="company_number">The company number of the beneficial owner details being requested.</param>
        /// <param name="psc_id">The id of the beneficial owner details being requested.</param>
        /// <returns>IndividualBO resource returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IndividualBeneficialOwner> IndividualBeneficialOwnerAsync(string company_number, string psc_id, System.Threading.CancellationToken cancellationToken)
        {
            if (company_number == null)
                throw new System.ArgumentNullException("company_number");

            if (psc_id == null)
                throw new System.ArgumentNullException("psc_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/company/{company_number}/persons-with-significant-control/individual-beneficial-owner/{psc_id}");
            urlBuilder_.Replace("{company_number}", System.Uri.EscapeDataString(ConvertToString(company_number, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{psc_id}", System.Uri.EscapeDataString(ConvertToString(psc_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IndividualBeneficialOwner>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorised", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Resource not found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the corporate entity with significant control
        /// </summary>
        /// <remarks>
        /// Get details of a corporate entity with significant control
        /// </remarks>
        /// <param name="company_number">The company number of the corporate entity with significant control details being requested.</param>
        /// <param name="psc_id">The id of the corporate entity with significant control details being requested.</param>
        /// <returns>CorporateEntityPSC resource returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CorporateEntity> CorporateEntityAsync(string company_number, string psc_id)
        {
            return CorporateEntityAsync(company_number, psc_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the corporate entity with significant control
        /// </summary>
        /// <remarks>
        /// Get details of a corporate entity with significant control
        /// </remarks>
        /// <param name="company_number">The company number of the corporate entity with significant control details being requested.</param>
        /// <param name="psc_id">The id of the corporate entity with significant control details being requested.</param>
        /// <returns>CorporateEntityPSC resource returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CorporateEntity> CorporateEntityAsync(string company_number, string psc_id, System.Threading.CancellationToken cancellationToken)
        {
            if (company_number == null)
                throw new System.ArgumentNullException("company_number");

            if (psc_id == null)
                throw new System.ArgumentNullException("psc_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/company/{company_number}/persons-with-significant-control/corporate-entity/{psc_id}");
            urlBuilder_.Replace("{company_number}", System.Uri.EscapeDataString(ConvertToString(company_number, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{psc_id}", System.Uri.EscapeDataString(ConvertToString(psc_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CorporateEntity>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorised", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Resource not found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the corporate entity beneficial owner
        /// </summary>
        /// <remarks>
        /// Get details of a corporate entity beneficial owner
        /// </remarks>
        /// <param name="company_number">The company number of the corporate entity beneficial owner details being requested.</param>
        /// <param name="psc_id">The id of the corporate entity beneficial owner details being requested.</param>
        /// <returns>CorporateEntityBO resource returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CorporateEntityBeneficialOwner> CorporateEntityBeneficialOwnerAsync(string company_number, string psc_id)
        {
            return CorporateEntityBeneficialOwnerAsync(company_number, psc_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the corporate entity beneficial owner
        /// </summary>
        /// <remarks>
        /// Get details of a corporate entity beneficial owner
        /// </remarks>
        /// <param name="company_number">The company number of the corporate entity beneficial owner details being requested.</param>
        /// <param name="psc_id">The id of the corporate entity beneficial owner details being requested.</param>
        /// <returns>CorporateEntityBO resource returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CorporateEntityBeneficialOwner> CorporateEntityBeneficialOwnerAsync(string company_number, string psc_id, System.Threading.CancellationToken cancellationToken)
        {
            if (company_number == null)
                throw new System.ArgumentNullException("company_number");

            if (psc_id == null)
                throw new System.ArgumentNullException("psc_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/company/{company_number}/persons-with-significant-control/corporate-entity-beneficial-owner/{psc_id}");
            urlBuilder_.Replace("{company_number}", System.Uri.EscapeDataString(ConvertToString(company_number, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{psc_id}", System.Uri.EscapeDataString(ConvertToString(psc_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CorporateEntityBeneficialOwner>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorised", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Resource not found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the legal person with significant control
        /// </summary>
        /// <remarks>
        /// Get details of a legal person with significant control
        /// </remarks>
        /// <param name="company_number">The company number of the legal person with significant control details being requested.</param>
        /// <param name="psc_id">The id of the legal person with significant control details being requested.</param>
        /// <returns>LegalPersonPSC resource returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<LegalPerson> LegalPersonAsync(string company_number, string psc_id)
        {
            return LegalPersonAsync(company_number, psc_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the legal person with significant control
        /// </summary>
        /// <remarks>
        /// Get details of a legal person with significant control
        /// </remarks>
        /// <param name="company_number">The company number of the legal person with significant control details being requested.</param>
        /// <param name="psc_id">The id of the legal person with significant control details being requested.</param>
        /// <returns>LegalPersonPSC resource returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LegalPerson> LegalPersonAsync(string company_number, string psc_id, System.Threading.CancellationToken cancellationToken)
        {
            if (company_number == null)
                throw new System.ArgumentNullException("company_number");

            if (psc_id == null)
                throw new System.ArgumentNullException("psc_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/company/{company_number}/persons-with-significant-control/legal-person/{psc_id}");
            urlBuilder_.Replace("{company_number}", System.Uri.EscapeDataString(ConvertToString(company_number, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{psc_id}", System.Uri.EscapeDataString(ConvertToString(psc_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LegalPerson>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorised", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Resource not found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the legal person beneficial owner
        /// </summary>
        /// <remarks>
        /// Get details of a legal person beneficial owner
        /// </remarks>
        /// <param name="company_number">The company number of the legal person beneficial owner details being requested.</param>
        /// <param name="psc_id">The id of the legal person beneficial owner details being requested.</param>
        /// <returns>LegalPersonBO resource returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<LegalPersonBeneficialOwner> LegalPersonBeneficialOwnerAsync(string company_number, string psc_id)
        {
            return LegalPersonBeneficialOwnerAsync(company_number, psc_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the legal person beneficial owner
        /// </summary>
        /// <remarks>
        /// Get details of a legal person beneficial owner
        /// </remarks>
        /// <param name="company_number">The company number of the legal person beneficial owner details being requested.</param>
        /// <param name="psc_id">The id of the legal person beneficial owner details being requested.</param>
        /// <returns>LegalPersonBO resource returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LegalPersonBeneficialOwner> LegalPersonBeneficialOwnerAsync(string company_number, string psc_id, System.Threading.CancellationToken cancellationToken)
        {
            if (company_number == null)
                throw new System.ArgumentNullException("company_number");

            if (psc_id == null)
                throw new System.ArgumentNullException("psc_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/company/{company_number}/persons-with-significant-control/legal-person-beneficial-owner/{psc_id}");
            urlBuilder_.Replace("{company_number}", System.Uri.EscapeDataString(ConvertToString(company_number, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{psc_id}", System.Uri.EscapeDataString(ConvertToString(psc_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LegalPersonBeneficialOwner>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorised", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Resource not found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List the company persons with significant control statements
        /// </summary>
        /// <remarks>
        /// List of all persons with significant control statements
        /// </remarks>
        /// <param name="company_number">The company number of the persons with significant control statements list being requested.</param>
        /// <param name="items_per_page">The id of the legal person with significant control details being requested.</param>
        /// <param name="start_index">The offset into the entire result set that this page starts.</param>
        /// <param name="register_view">Display register specific information. If register is held at Companies House and register_view is set to true, only statements which are active or were withdrawn during election period are shown. Accepted values are: -`true`  
        /// <br/> -`false`  
        /// <br/> Defaults to false.</param>
        /// <returns>CompanyPSCStatements resource returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<StatementList> PersonsWithSignificantControlStatementsAsync(string company_number, int items_per_page, int start_index, bool register_view)
        {
            return PersonsWithSignificantControlStatementsAsync(company_number, items_per_page, start_index, register_view, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List the company persons with significant control statements
        /// </summary>
        /// <remarks>
        /// List of all persons with significant control statements
        /// </remarks>
        /// <param name="company_number">The company number of the persons with significant control statements list being requested.</param>
        /// <param name="items_per_page">The id of the legal person with significant control details being requested.</param>
        /// <param name="start_index">The offset into the entire result set that this page starts.</param>
        /// <param name="register_view">Display register specific information. If register is held at Companies House and register_view is set to true, only statements which are active or were withdrawn during election period are shown. Accepted values are: -`true`  
        /// <br/> -`false`  
        /// <br/> Defaults to false.</param>
        /// <returns>CompanyPSCStatements resource returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<StatementList> PersonsWithSignificantControlStatementsAsync(string company_number, int items_per_page, int start_index, bool register_view, System.Threading.CancellationToken cancellationToken)
        {
            if (company_number == null)
                throw new System.ArgumentNullException("company_number");

            if (items_per_page == null)
                throw new System.ArgumentNullException("items_per_page");

            if (start_index == null)
                throw new System.ArgumentNullException("start_index");

            if (register_view == null)
                throw new System.ArgumentNullException("register_view");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/company/{company_number}/persons-with-significant-control-statements?");
            urlBuilder_.Replace("{company_number}", System.Uri.EscapeDataString(ConvertToString(company_number, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("items_per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(items_per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("start_index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start_index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("register_view") + "=").Append(System.Uri.EscapeDataString(ConvertToString(register_view, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StatementList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorised", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Resource not found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the person with significant control statement
        /// </summary>
        /// <remarks>
        /// Get details of a person with significant control statement
        /// </remarks>
        /// <param name="company_number">The company number of the persons with significant control statements list being requested.</param>
        /// <param name="statement_id">The id of the person with significant control statement details being requested.</param>
        /// <returns>PSCStatement resource returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Schema24> PersonsWithSignificantControlStatements2Async(string company_number, string statement_id)
        {
            return PersonsWithSignificantControlStatements2Async(company_number, statement_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the person with significant control statement
        /// </summary>
        /// <remarks>
        /// Get details of a person with significant control statement
        /// </remarks>
        /// <param name="company_number">The company number of the persons with significant control statements list being requested.</param>
        /// <param name="statement_id">The id of the person with significant control statement details being requested.</param>
        /// <returns>PSCStatement resource returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Schema24> PersonsWithSignificantControlStatements2Async(string company_number, string statement_id, System.Threading.CancellationToken cancellationToken)
        {
            if (company_number == null)
                throw new System.ArgumentNullException("company_number");

            if (statement_id == null)
                throw new System.ArgumentNullException("statement_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/company/{company_number}/persons-with-significant-control-statements/{statement_id}");
            urlBuilder_.Replace("{company_number}", System.Uri.EscapeDataString(ConvertToString(company_number, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{statement_id}", System.Uri.EscapeDataString(ConvertToString(statement_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Schema24>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorised", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Resource not found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the super secure person with significant control
        /// </summary>
        /// <remarks>
        /// Get details of a super secure person with significant control
        /// </remarks>
        /// <param name="company_number">The company number of the super secure person with significant control details being requested.</param>
        /// <param name="super_secure_id">The id of the super secure person with significant control details being requested.</param>
        /// <returns>SuperSecurePSC resource returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SuperSecure> SuperSecureAsync(string company_number, string super_secure_id)
        {
            return SuperSecureAsync(company_number, super_secure_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the super secure person with significant control
        /// </summary>
        /// <remarks>
        /// Get details of a super secure person with significant control
        /// </remarks>
        /// <param name="company_number">The company number of the super secure person with significant control details being requested.</param>
        /// <param name="super_secure_id">The id of the super secure person with significant control details being requested.</param>
        /// <returns>SuperSecurePSC resource returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SuperSecure> SuperSecureAsync(string company_number, string super_secure_id, System.Threading.CancellationToken cancellationToken)
        {
            if (company_number == null)
                throw new System.ArgumentNullException("company_number");

            if (super_secure_id == null)
                throw new System.ArgumentNullException("super_secure_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/company/{company_number}/persons-with-significant-control/super-secure/{super_secure_id}");
            urlBuilder_.Replace("{company_number}", System.Uri.EscapeDataString(ConvertToString(company_number, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{super_secure_id}", System.Uri.EscapeDataString(ConvertToString(super_secure_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SuperSecure>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorised", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Resource not found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the super secure beneficial owner
        /// </summary>
        /// <remarks>
        /// Get details of a super secure beneficial owner
        /// </remarks>
        /// <param name="company_number">The company number of the super secure beneficial owner details being requested.</param>
        /// <param name="super_secure_id">The id of the super secure beneficial owner details being requested.</param>
        /// <returns>SuperSecureBO resource returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SuperSecureBeneficialOwner> SuperSecureBeneficialOwnerAsync(string company_number, string super_secure_id)
        {
            return SuperSecureBeneficialOwnerAsync(company_number, super_secure_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the super secure beneficial owner
        /// </summary>
        /// <remarks>
        /// Get details of a super secure beneficial owner
        /// </remarks>
        /// <param name="company_number">The company number of the super secure beneficial owner details being requested.</param>
        /// <param name="super_secure_id">The id of the super secure beneficial owner details being requested.</param>
        /// <returns>SuperSecureBO resource returned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SuperSecureBeneficialOwner> SuperSecureBeneficialOwnerAsync(string company_number, string super_secure_id, System.Threading.CancellationToken cancellationToken)
        {
            if (company_number == null)
                throw new System.ArgumentNullException("company_number");

            if (super_secure_id == null)
                throw new System.ArgumentNullException("super_secure_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/company/{company_number}/persons-with-significant-control/super-secure-beneficial-owner/{super_secure_id}");
            urlBuilder_.Replace("{company_number}", System.Uri.EscapeDataString(ConvertToString(company_number, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{super_secure_id}", System.Uri.EscapeDataString(ConvertToString(super_secure_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SuperSecureBeneficialOwner>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorised", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Resource not found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Schema1
    {
        /// <summary>
        /// The number of further search results available for the current search.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total_results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Total_results { get; set; }

        /// <summary>
        /// The index into the entire result set that this result page starts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start_index", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Start_index { get; set; }

        /// <summary>
        /// The number of search items returned per page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items_per_page", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Items_per_page { get; set; }

        /// <summary>
        /// The ETag of the resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Schema2
    {
        /// <summary>
        /// The title of the search result.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// A single line address. This will be the address that matched within the indexed document or the primary address otherwise (as returned by the `address` member).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address_snippet", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address_snippet { get; set; }

        /// <summary>
        /// The URL of the search result.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Links { get; set; }

        /// <summary>
        /// The result description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Summary information for the result showing additional details that have matched.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("snippet", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Snippet { get; set; }

        /// <summary>
        /// A list of members and arrays of character offset defining substrings that matched the search terms.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("matches", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Matches { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Schema3
    {
        /// <summary>
        /// The first line of the address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address_line_1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address_line_1 { get; set; }

        /// <summary>
        /// The second line of the address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address_line_2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address_line_2 { get; set; }

        /// <summary>
        /// The country.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Schema3Country Country { get; set; }

        /// <summary>
        /// The locality e.g London.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locality", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locality { get; set; }

        /// <summary>
        /// The post-office box number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("po_box", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Po_box { get; set; }

        /// <summary>
        /// The postal code e.g CF14 3UZ.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postal_code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Postal_code { get; set; }

        /// <summary>
        /// The care of name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("care_of", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Care_of { get; set; }

        /// <summary>
        /// The region e.g Surrey.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("region", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Region { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Schema4
    {
        /// <summary>
        /// The company number of the dissolved company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company_number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Company_number { get; set; }

        /// <summary>
        /// The date that the company ceased being known under the company name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ceased_on", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Ceased_on { get; set; }

        /// <summary>
        /// The date that the company started being known under the company name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("effective_from", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Effective_from { get; set; }

        /// <summary>
        /// The previous name of the company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Schema5
    {
        /// <summary>
        /// The company name associated with the dissolved company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Company_name { get; set; }

        /// <summary>
        /// The company number of the dissolved company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company_number", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Company_number { get; set; }

        /// <summary>
        /// The status of the company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company_status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Company_status { get; set; }

        /// <summary>
        /// The alphakey with it's id associated with the dissolved company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ordered_alpha_key_with_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ordered_alpha_key_with_id { get; set; }

        /// <summary>
        /// The type of search result
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Schema5Kind Kind { get; set; }

        /// <summary>
        /// The date that the company was dissolved
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date_of_cessation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date_of_cessation { get; set; }

        /// <summary>
        /// The date that the company was incorporated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date_of_creation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date_of_creation { get; set; }

        /// <summary>
        /// This will only appear if there are ROA details in the company record
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registered_office_address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Registered_office_address Registered_office_address { get; set; }

        [Newtonsoft.Json.JsonProperty("previous_company_names", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Schema4> Previous_company_names { get; set; }

        [Newtonsoft.Json.JsonProperty("matched_previous_company_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Matched_previous_company_name Matched_previous_company_name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Schema6
    {
        /// <summary>
        /// The company name associated with the company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Company_name { get; set; }

        /// <summary>
        /// The company number of the company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company_number", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Company_number { get; set; }

        /// <summary>
        /// The status of the company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company_status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Company_status { get; set; }

        /// <summary>
        /// The alphakey with it's id associated with the company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ordered_alpha_key_with_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ordered_alpha_key_with_id { get; set; }

        /// <summary>
        /// The type of search result
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Schema6Kind Kind { get; set; }

        /// <summary>
        /// The link to the company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Links Links { get; set; } = new Links();

        /// <summary>
        /// The type of company associated with the company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Company_type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Schema7
    {
        /// <summary>
        /// The company name associated with the company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Company_name { get; set; }

        /// <summary>
        /// The company number of the company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company_number", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Company_number { get; set; }

        /// <summary>
        /// The status of the company.  
        /// <br/> For enumeration descriptions see `company_status` section in the [enumeration mappings] (https://github.com/companieshouse/api-enumerations/blob/master/constants.yml)  
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company_status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Schema7Company_status Company_status { get; set; }

        /// <summary>
        /// The type of the company.  
        /// <br/> For enumeration descriptions see `company_type` section in the [enumeration mappings](https://github.com/companieshouse/api-enumerations/blob/master/constants.yml)    
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Schema7Company_type Company_type { get; set; }

        /// <summary>
        /// The subtype of the company.  
        /// <br/> For enumeration descriptions see `company_subtype` section in the [enumeration mappings](https://github.com/companieshouse/api-enumerations/blob/master/constants.yml)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company_subtype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Schema7Company_subtype Company_subtype { get; set; }

        /// <summary>
        /// The type of search result
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Schema7Kind Kind { get; set; }

        /// <summary>
        /// The link to the company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links2 Links { get; set; }

        /// <summary>
        /// The date that the company was dissolved
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date_of_cessation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date_of_cessation { get; set; }

        /// <summary>
        /// The date that the company was incorporated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date_of_creation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date_of_creation { get; set; }

        /// <summary>
        /// This will only appear if there are ROA details in the company record
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registered_office_address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Registered_office_address2 Registered_office_address { get; set; }

        /// <summary>
        /// SIC codes for this company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sic_codes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Sic_codes { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Schema8
    {
        /// <summary>
        /// The correspondence address of the officer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Address { get; set; } = new object();

        /// <summary>
        /// The date on which the officer was appointed. For the officer roles of `corporate-managing-officer` and `managing-officer` this is the date on which Companies House was notified about the officer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("appointed_on", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Appointed_on { get; set; }

        /// <summary>
        /// The contact at the `corporate-managing-officer` of a `registered-overseas-entity`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contact_details", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Contact_details { get; set; }

        /// <summary>
        /// The officer's country of residence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country_of_residence", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country_of_residence { get; set; }

        /// <summary>
        /// Details of director date of birth.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date_of_birth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Date_of_birth { get; set; }

        /// <summary>
        /// Links to other resources associated with this officer list item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Links { get; set; } = new object();

        /// <summary>
        /// Corporate or natural officer name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The officer's nationality.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nationality", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nationality { get; set; }

        /// <summary>
        /// The officer's job title.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("occupation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Occupation { get; set; }

        [Newtonsoft.Json.JsonProperty("officer_role", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Schema8Officer_role Officer_role { get; set; }

        /// <summary>
        /// The principal/registered office address of a `corporate-managing-officer` of a `registered-overseas-entity`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("principal_office_address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Principal_office_address { get; set; }

        /// <summary>
        /// The date the officer was resigned. For the officer roles of `corporate-managing-officer` and `managing-officer` this is the date on which Companies House was notified about the officers cessation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resigned_on", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Resigned_on { get; set; }

        /// <summary>
        /// The responsibilities of the managing officer of a `registered-overseas-entity`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("responsibilities", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Responsibilities { get; set; }

        /// <summary>
        /// Former names for the officer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("former_names", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Former_names> Former_names { get; set; }

        /// <summary>
        /// Only one from `eea`, `non-eea`, `uk-limited`, `other-corporate-body-or-firm` or `registered-overseas-entity-corporate-managing-officer` can be supplied, not multiples of them.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Identification { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Schema9
    {
        /// <summary>
        /// A list of errors found
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Errors> Errors { get; set; } = new System.Collections.ObjectModel.Collection<Errors>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Schema10
    {
        /// <summary>
        /// The date registered on
        /// </summary>
        [Newtonsoft.Json.JsonProperty("moved_on", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Moved_on { get; set; }

        /// <summary>
        /// Location of registration
        /// </summary>
        [Newtonsoft.Json.JsonProperty("register_moved_to", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Schema10Register_moved_to Register_moved_to { get; set; }

        /// <summary>
        /// A set of URLs related to the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Links { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Schema11
    {
        /// <summary>
        /// Annotations for the filing
        /// </summary>
        [Newtonsoft.Json.JsonProperty("annotations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Annotations> Annotations { get; set; }

        /// <summary>
        /// Any filings associated with the current item
        /// </summary>
        [Newtonsoft.Json.JsonProperty("associated_filings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Associated_filings> Associated_filings { get; set; }

        /// <summary>
        /// The barcode of the document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("barcode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Barcode { get; set; }

        /// <summary>
        /// The transaction ID of the filing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transaction_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Transaction_id { get; set; }

        /// <summary>
        /// The category of the document filed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Schema11Category Category { get; set; }

        /// <summary>
        /// The date the filing was processed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date { get; set; }

        /// <summary>
        /// A description of the filing.
        /// <br/> For enumeration descriptions see `description` section in the [enumeration mappings](https://github.com/companieshouse/api-enumerations/blob/master/filing_history_descriptions.yml) file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>
        /// Links to other resources associated with this filing history item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Links { get; set; }

        /// <summary>
        /// Number of pages within the PDF document (links.document_metadata)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Pages { get; set; }

        /// <summary>
        /// If true, indicates this is a paper filing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paper_filed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Paper_filed { get; set; }

        /// <summary>
        /// Resolutions for the filing
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resolutions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Resolutions> Resolutions { get; set; }

        /// <summary>
        /// The sub-category of the document filed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subcategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Schema11Subcategory Subcategory { get; set; }

        /// <summary>
        /// The type of filing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Schema12
    {
        /// <summary>
        /// Exemption valid from.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exempt_from", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Exempt_from { get; set; }

        /// <summary>
        /// Exemption valid to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exempt_to", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Exempt_to { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Schema13
    {
        /// <summary>
        /// Link to this disqualification resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Self { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Schema14
    {
        /// <summary>
        /// The case identifier of the disqualification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("case_identifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Case_identifier { get; set; }

        /// <summary>
        /// The address of the disqualified officer as provided by the disqualifying authority.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Address { get; set; } = new object();

        /// <summary>
        /// The companies in which the misconduct took place.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company_names", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Company_names { get; set; }

        /// <summary>
        /// The name of the court that handled the disqualification case.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("court_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Court_name { get; set; }

        /// <summary>
        /// An enumeration type that provides the disqualifying authority that handled the disqualification case.
        /// <br/> For enumeration descriptions see `disqualification_type` section in the [enumeration mappings] (https://github.com/companieshouse/api-enumerations/blob/master/disqualified_officer_descriptions.yml)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disqualification_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Disqualification_type { get; set; }

        /// <summary>
        /// The date that the disqualification starts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disqualified_from", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Disqualified_from { get; set; }

        /// <summary>
        /// The date that the disqualification ends.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disqualified_until", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Disqualified_until { get; set; }

        /// <summary>
        /// The date the disqualification hearing was on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("heard_on", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Heard_on { get; set; }

        /// <summary>
        /// The date the disqualification undertaking was agreed on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("undertaken_on", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Undertaken_on { get; set; }

        /// <summary>
        /// The latest variation made to the disqualification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("last_variation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Last_variation> Last_variation { get; set; }

        /// <summary>
        /// The reason for the disqualification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Reason { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Schema15
    {
        /// <summary>
        /// The companies for which the disqualified officer has permission to act.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company_names", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Company_names { get; set; }

        /// <summary>
        /// The name of the court that granted the permission to act.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("court_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Court_name { get; set; }

        /// <summary>
        /// The date that the permission ends.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expires_on", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Expires_on { get; set; }

        /// <summary>
        /// The date that the permission starts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("granted_on", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Granted_on { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Schema16
    {
        /// <summary>
        /// The first line of the address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address_line_1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address_line_1 { get; set; }

        /// <summary>
        /// The second line of the address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address_line_2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address_line_2 { get; set; }

        /// <summary>
        /// The care of name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("care_of", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Care_of { get; set; }

        /// <summary>
        /// The country. For example, UK.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }

        /// <summary>
        /// The locality. For example London.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locality", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locality { get; set; }

        /// <summary>
        /// The post-office box number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("po_box", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Po_box { get; set; }

        /// <summary>
        /// The postal code. For example CF14 3UZ.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postal_code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Postal_code { get; set; }

        /// <summary>
        /// The property name or number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("premises", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Premises { get; set; }

        /// <summary>
        /// The region. For example Surrey.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("region", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Region { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Schema17
    {
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Etag { get; set; }

        /// <summary>
        /// The id of the charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The charge code is a replacement of the mortgage description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("charge_code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Charge_code { get; set; }

        /// <summary>
        /// Classification information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("classification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Classification> Classification { get; set; } = new System.Collections.ObjectModel.Collection<Classification>();

        /// <summary>
        /// The charge number is used to reference an individual charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("charge_number", Required = Newtonsoft.Json.Required.Always)]
        public int Charge_number { get; set; }

        /// <summary>
        /// The status of the charge.
        /// <br/> For enumeration descriptions see `status` section in the [enumeration mappings](https://github.com/companieshouse/api-enumerations/blob/master/mortgage_descriptions.yml)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Schema17Status Status { get; set; }

        /// <summary>
        /// Cease/release information about the charge.
        /// <br/> For enumeration descriptions see `assets-ceased-released` section in the [enumeration mappings](https://github.com/companieshouse/api-enumerations/blob/master/mortgage_descriptions.yml)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assests_ceased_released", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Schema17Assests_ceased_released Assests_ceased_released { get; set; }

        /// <summary>
        /// The date the property or undertaking was acquired on
        /// </summary>
        [Newtonsoft.Json.JsonProperty("acquired_on", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Acquired_on { get; set; }

        /// <summary>
        /// The date the charge was submitted to Companies House
        /// </summary>
        [Newtonsoft.Json.JsonProperty("delivered_on", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Delivered_on { get; set; }

        /// <summary>
        /// The date the issue was resolved on
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resolved_on", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Resolved_on { get; set; }

        /// <summary>
        /// The date by which the series of debentures were created
        /// </summary>
        [Newtonsoft.Json.JsonProperty("covering_instrument_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Covering_instrument_date { get; set; }

        /// <summary>
        /// The date the charge was created
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_on", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Created_on { get; set; }

        /// <summary>
        /// The date the charge was satisfied
        /// </summary>
        [Newtonsoft.Json.JsonProperty("satisfied_on", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Satisfied_on { get; set; }

        /// <summary>
        /// Details of charge or undertaking
        /// </summary>
        [Newtonsoft.Json.JsonProperty("particulars", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Particulars> Particulars { get; set; }

        /// <summary>
        /// Information about what is secured against this charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("secured_details", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Secured_details> Secured_details { get; set; }

        /// <summary>
        /// Information about alterations for Scottish companies
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scottish_alterations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Scottish_alterations> Scottish_alterations { get; set; }

        /// <summary>
        /// Charge has more than four person entitled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("more_than_four_persons_entitled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool More_than_four_persons_entitled { get; set; }

        /// <summary>
        /// People that are entitled to the charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("persons_entitled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Persons_entitled> Persons_entitled { get; set; }

        /// <summary>
        /// Transactions that have been filed for the charge.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Transactions> Transactions { get; set; }

        /// <summary>
        /// Transactions that have been filed for the charge.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insolvency_cases", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Insolvency_cases> Insolvency_cases { get; set; }

        /// <summary>
        /// The resources related to this charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Links3> Links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Schema18
    {
        /// <summary>
        /// The day of the date of birth.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("day", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Day { get; set; }

        /// <summary>
        /// The month of date of birth.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("month", Required = Newtonsoft.Json.Required.Always)]
        public int Month { get; set; }

        /// <summary>
        /// The year of date of birth.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Always)]
        public int Year { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Schema19
    {
        /// <summary>
        /// The forename of the person with significant control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("forename", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Forename { get; set; }

        /// <summary>
        /// Title of the person with significant control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// Other forenames of the person with significant control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("other_forenames", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Other_forenames { get; set; }

        /// <summary>
        /// The surname of the person with significant control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surname", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Surname { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Schema20
    {
        /// <summary>
        /// The URL of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Self { get; set; }

        /// <summary>
        /// The URL of the statement linked to this person with significant control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Statement { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Schema21
    {
        /// <summary>
        /// The first line of the address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address_line_1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address_line_1 { get; set; }

        /// <summary>
        /// The second line of the address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address_line_2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address_line_2 { get; set; }

        /// <summary>
        /// Care of name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("care_of", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Care_of { get; set; }

        /// <summary>
        /// The country. For example, UK.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }

        /// <summary>
        /// The locality. For example London.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locality", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locality { get; set; }

        /// <summary>
        /// The post-officer box number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("po_box", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Po_box { get; set; }

        /// <summary>
        /// The postal code. For example CF14 3UZ.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postal_code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Postal_code { get; set; }

        /// <summary>
        /// The property name or number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("premises", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Premises { get; set; }

        /// <summary>
        /// The region. For example Surrey.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("region", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Region { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Schema22
    {
        /// <summary>
        /// The first line of the address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address_line_1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address_line_1 { get; set; }

        /// <summary>
        /// The second line of the address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address_line_2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address_line_2 { get; set; }

        /// <summary>
        /// The care of name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("care_of", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Care_of { get; set; }

        /// <summary>
        /// The country. For example, United Kingdom.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }

        /// <summary>
        /// The locality. For example London.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locality", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locality { get; set; }

        /// <summary>
        /// The post-officer box number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("po_box", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Po_box { get; set; }

        /// <summary>
        /// The postal code. For example CF14 3UZ.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postal_code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Postal_code { get; set; }

        /// <summary>
        /// The property name or number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("premises", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Premises { get; set; }

        /// <summary>
        /// The region. For example Surrey.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("region", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Region { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Schema23
    {
        /// <summary>
        /// The URL of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Self { get; set; }

        /// <summary>
        /// The URL of the statement linked to this beneficial owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Statement { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Schema24
    {
        /// <summary>
        /// The ETag of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Etag { get; set; }

        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Schema24Kind Kind { get; set; }

        /// <summary>
        /// The date that the person with significant control statement was processed by Companies House.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notified_on", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Notified_on { get; set; }

        /// <summary>
        /// The date that Companies House was notified about the cessation of this person with significant control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ceased_on", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Ceased_on { get; set; }

        /// <summary>
        /// The reason for the company withdrawing a &lt;code&gt;restrictions-notice-issued-to-psc&lt;/code&gt; statement
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restrictions_notice_withdrawal_reason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Schema24Restrictions_notice_withdrawal_reason Restrictions_notice_withdrawal_reason { get; set; }

        /// <summary>
        /// Indicates the type of statement filed.
        /// <br/> For enumeration descriptions see `statement_description` section in the [enumeration mappings](https://github.com/companieshouse/api-enumerations/blob/master/psc_descriptions.yml) file. 
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statement", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Schema24Statement Statement { get; set; }

        /// <summary>
        /// The name of the psc linked to this statement.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("linked_psc_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Linked_psc_name { get; set; }

        /// <summary>
        /// A set of URLs related to the resource, including self.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Links { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Schema25
    {
        /// <summary>
        /// The URL of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Self { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Register_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"directors")]
        Directors = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"secretaries")]
        Secretaries = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"llp-members")]
        LlpMembers = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Register_view
    {

        [System.Runtime.Serialization.EnumMember(Value = @"true")]
        True = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"false")]
        False = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Order_by
    {

        [System.Runtime.Serialization.EnumMember(Value = @"appointed_on")]
        Appointed_on = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"resigned_on")]
        Resigned_on = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"surname")]
        Surname = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RegisteredOfficeAddress
    {
        /// <summary>
        /// The ETag of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// The type of resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RegisteredOfficeAddressKind Kind { get; set; }

        /// <summary>
        /// Links to the related resources
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Links { get; set; }

        /// <summary>
        /// The property name or number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("premises", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Premises { get; set; }

        /// <summary>
        /// The first line of the address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address_line_1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address_line_1 { get; set; }

        /// <summary>
        /// The second line of the address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address_line_2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address_line_2 { get; set; }

        /// <summary>
        /// The locality e.g London.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locality", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Locality { get; set; }

        /// <summary>
        /// The region e.g Surrey.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("region", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Region { get; set; }

        /// <summary>
        /// The postal code e.g CF14 3UZ.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postal_code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Postal_code { get; set; }

        /// <summary>
        /// The country.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RegisteredOfficeAddressCountry Country { get; set; }

        /// <summary>
        /// The post-office box number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("po_box", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Po_box { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompanyProfile
    {
        /// <summary>
        /// Company accounts information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accounts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Accounts { get; set; }

        /// <summary>
        /// Annual return information. This member is only returned if a confirmation statement has not be filed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("annual_return", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Annual_return { get; set; }

        /// <summary>
        /// Flag indicating whether this company can file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("can_file", Required = Newtonsoft.Json.Required.Always)]
        public bool Can_file { get; set; }

        /// <summary>
        /// Confirmation statement information (N.B. refers to the Annual Statement where type is registered-overseas-entity)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("confirmation_statement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Confirmation_statement { get; set; }

        /// <summary>
        /// The name of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Company_name { get; set; }

        /// <summary>
        /// The jurisdiction specifies the political body responsible for the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jurisdiction", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CompanyProfileJurisdiction Jurisdiction { get; set; }

        /// <summary>
        /// The number of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company_number", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Company_number { get; set; }

        /// <summary>
        /// The date when the company was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date_of_creation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date_of_creation { get; set; }

        /// <summary>
        /// The date which the company was converted/closed, dissolved or removed. Please refer to company status to determine which.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date_of_cessation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date_of_cessation { get; set; }

        /// <summary>
        /// The ETag of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// The flag indicating if the company has been liquidated in the past.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("has_been_liquidated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Has_been_liquidated { get; set; }

        /// <summary>
        /// The flag indicating if the company has any charges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("has_charges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Has_charges { get; set; }

        /// <summary>
        /// The flag indicating if the company is a Community Interest Company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("is_community_interest_company", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Is_community_interest_company { get; set; }

        /// <summary>
        /// Foreign company details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("foreign_company_details", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Foreign_company_details { get; set; }

        /// <summary>
        /// The date of last full members list update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("last_full_members_list_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Last_full_members_list_date { get; set; }

        /// <summary>
        /// The address of the company's registered office.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registered_office_address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Registered_office_address { get; set; }

        /// <summary>
        /// The correspondence address of a Registered overseas entity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("service_address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Service_address { get; set; }

        /// <summary>
        /// The total count of super secure managing officers for a `registered-overseas-entity`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("super_secure_managing_officer_count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Super_secure_managing_officer_count { get; set; }

        /// <summary>
        /// SIC codes for this company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sic_codes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Sic_codes { get; set; }

        /// <summary>
        /// The previous names of this company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("previous_company_names", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Previous_company_names> Previous_company_names { get; set; }

        /// <summary>
        /// The status of the company.  
        /// <br/> For enumeration descriptions see `company_status` section in the [enumeration mappings] (https://github.com/companieshouse/api-enumerations/blob/master/constants.yml)  
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company_status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CompanyProfileCompany_status Company_status { get; set; }

        /// <summary>
        /// Extra details about the status of the company.  
        /// <br/> For enumeration descriptions see `company_status_detail` section in the [enumeration mappings](https://github.com/companieshouse/api-enumerations/blob/master/constants.yml).  
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company_status_detail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CompanyProfileCompany_status_detail Company_status_detail { get; set; }

        /// <summary>
        /// The type of the company.  
        /// <br/> For enumeration descriptions see `company_type` section in the [enumeration mappings](https://github.com/companieshouse/api-enumerations/blob/master/constants.yml)    
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CompanyProfileType Type { get; set; }

        /// <summary>
        /// The flag indicating if the company has insolvency history.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("has_insolvency_history", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Has_insolvency_history { get; set; }

        /// <summary>
        /// Flag indicating whether post can be delivered to the registered office.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("undeliverable_registered_office_address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Undeliverable_registered_office_address { get; set; }

        /// <summary>
        /// Flag indicating registered office address as been replaced.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registered_office_is_in_dispute", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Registered_office_is_in_dispute { get; set; }

        /// <summary>
        /// UK branch of a foreign company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("branch_company_details", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Branch_company_details { get; set; }

        /// <summary>
        /// A set of URLs related to the resource, including self.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Links { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Search : Schema1
    {
        /// <summary>
        /// The type of search response returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SearchKind Kind { get; set; }

        /// <summary>
        /// The results of the completed search. See `items.kind` for details of each specific result resource returned.,
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Items> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompanySearch : Schema1
    {
        /// <summary>
        /// The type of search response returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CompanySearchKind Kind { get; set; }

        /// <summary>
        /// The results of the completed search.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Items2> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfficerSearch : Schema1
    {
        /// <summary>
        /// The type of response returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OfficerSearchKind Kind { get; set; }

        /// <summary>
        /// The results of the completed search.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Items3> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DisqualifiedOfficerSearch : Schema1
    {
        /// <summary>
        /// The type of response returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DisqualifiedOfficerSearchKind Kind { get; set; }

        /// <summary>
        /// The results of the completed search.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Items4> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response : Anonymous
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response2 : Anonymous2
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response3 : Anonymous3
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OfficerList
    {
        /// <summary>
        /// The number of active officers in this result set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("active_count", Required = Newtonsoft.Json.Required.Always)]
        public int Active_count { get; set; }

        /// <summary>
        /// The ETag of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Etag { get; set; }

        /// <summary>
        /// The list of officers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Schema8> Items { get; set; } = new System.Collections.ObjectModel.Collection<Schema8>();

        /// <summary>
        /// The number of officers to return per page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items_per_page", Required = Newtonsoft.Json.Required.Always)]
        public int Items_per_page { get; set; }

        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OfficerListKind Kind { get; set; }

        /// <summary>
        /// Links to other resources associated with this officer list resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Links { get; set; } = new object();

        /// <summary>
        /// The number of resigned officers in this result set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resigned_count", Required = Newtonsoft.Json.Required.Always)]
        public int Resigned_count { get; set; }

        /// <summary>
        /// The offset into the entire result set that this page starts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start_index", Required = Newtonsoft.Json.Required.Always)]
        public int Start_index { get; set; }

        /// <summary>
        /// The total number of officers in this result set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total_results", Required = Newtonsoft.Json.Required.Always)]
        public int Total_results { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompanyRegister
    {
        /// <summary>
        /// A set of URLs related to the resource, including self.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Links { get; set; } = new object();

        /// <summary>
        /// The number of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company_number", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Company_number { get; set; }

        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CompanyRegisterKind Kind { get; set; }

        /// <summary>
        /// company registers information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Registers { get; set; }

        /// <summary>
        /// The ETag of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FilingHistoryList
    {
        /// <summary>
        /// The status of this filing history.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filing_history_status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FilingHistoryListFiling_history_status Filing_history_status { get; set; }

        /// <summary>
        /// The ETag of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Etag { get; set; }

        /// <summary>
        /// The filing history items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Schema11> Items { get; set; } = new System.Collections.ObjectModel.Collection<Schema11>();

        /// <summary>
        /// The number of filing history items returned per page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items_per_page", Required = Newtonsoft.Json.Required.Always)]
        public int Items_per_page { get; set; }

        /// <summary>
        /// Indicates this resource is a filing history.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FilingHistoryListKind Kind { get; set; }

        /// <summary>
        /// The index into the entire result set that this result page starts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start_index", Required = Newtonsoft.Json.Required.Always)]
        public int Start_index { get; set; }

        /// <summary>
        /// The total number of filing history items for this company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Always)]
        public int Total_count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompanyExemptions
    {
        /// <summary>
        /// A set of URLs related to the resource, including self.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Links4> Links { get; set; } = new System.Collections.ObjectModel.Collection<Links4>();

        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CompanyExemptionsKind Kind { get; set; }

        /// <summary>
        /// The ETag of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Etag { get; set; }

        /// <summary>
        /// Company exemptions information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exemptions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Exemptions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NaturalDisqualification
    {
        /// <summary>
        /// The disqualified officer's date of birth.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date_of_birth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date_of_birth { get; set; }

        /// <summary>
        /// The ETag of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Etag { get; set; }

        /// <summary>
        /// The forename of the disqualified officer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("forename", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Forename { get; set; }

        /// <summary>
        /// The honours that the disqualified officer has.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("honours", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Honours { get; set; }

        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NaturalDisqualificationKind Kind { get; set; }

        /// <summary>
        /// The nationality of the disqualified officer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nationality", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nationality { get; set; }

        /// <summary>
        /// The other forenames of the disqualified officer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("other_forenames", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Other_forenames { get; set; }

        /// <summary>
        /// The surname of the disqualified officer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surname", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Surname { get; set; }

        /// <summary>
        /// The title of the disqualified officer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// Links to other resources associated with this officer disqualification resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Links { get; set; } = new object();

        /// <summary>
        /// The officer's disqualifications.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disqualifications", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Schema14> Disqualifications { get; set; } = new System.Collections.ObjectModel.Collection<Schema14>();

        /// <summary>
        /// Permissions to act that have been granted for the disqualified officer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions_to_act", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Schema15> Permissions_to_act { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CorporateDisqualification
    {
        /// <summary>
        /// The registration number of the disqualified officer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company_number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Company_number { get; set; }

        /// <summary>
        /// The country in which the disqualified officer was registered.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country_of_registration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country_of_registration { get; set; }

        /// <summary>
        /// The ETag of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Etag { get; set; }

        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CorporateDisqualificationKind Kind { get; set; }

        /// <summary>
        /// The name of the disqualified officer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Links to other resources associated with this officer disqualification resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Links { get; set; } = new object();

        /// <summary>
        /// The officer's disqualifications.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disqualifications", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Schema14> Disqualifications { get; set; } = new System.Collections.ObjectModel.Collection<Schema14>();

        /// <summary>
        /// Permissions that the disqualified officer has to act outside of their disqualification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions_to_act", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Schema15> Permissions_to_act { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AppointmentList
    {
        /// <summary>
        /// The officer's date of birth details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date_of_birth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Date_of_birth { get; set; }

        /// <summary>
        /// The ETag of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Etag { get; set; }

        /// <summary>
        /// Indicator representing if the officer is a corporate body.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("is_corporate_officer", Required = Newtonsoft.Json.Required.Always)]
        public bool Is_corporate_officer { get; set; }

        /// <summary>
        /// The list of officer appointments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Items5> Items { get; set; } = new System.Collections.ObjectModel.Collection<Items5>();

        /// <summary>
        /// The number of officer appointments to return per page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items_per_page", Required = Newtonsoft.Json.Required.Always)]
        public int Items_per_page { get; set; }

        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AppointmentListKind Kind { get; set; }

        /// <summary>
        /// Links to other resources associated with this officer appointment resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Links { get; set; } = new object();

        /// <summary>
        /// The corporate or natural officer name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The first row of data to retrieve, starting at 0. Use this parameter as a pagination mechanism along with the `items_per_page` parameter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start_index", Required = Newtonsoft.Json.Required.Always)]
        public int Start_index { get; set; }

        /// <summary>
        /// The total number of officer appointments in this result set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total_results", Required = Newtonsoft.Json.Required.Always)]
        public int Total_results { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChargeList
    {
        /// <summary>
        /// The ETag of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Etag { get; set; }

        /// <summary>
        /// Total number of charges returned by the API (filtering applies).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Total_count { get; set; }

        /// <summary>
        /// Number of satisfied charges
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unfiletered_count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Unfiletered_count { get; set; }

        /// <summary>
        /// Number of satisfied charges
        /// </summary>
        [Newtonsoft.Json.JsonProperty("satisfied_count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Satisfied_count { get; set; }

        /// <summary>
        /// Number of satisfied charges
        /// </summary>
        [Newtonsoft.Json.JsonProperty("part_satisfied_count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Part_satisfied_count { get; set; }

        /// <summary>
        /// List of charges
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Schema17> Items { get; set; } = new System.Collections.ObjectModel.Collection<Schema17>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompanyInsolvency
    {
        /// <summary>
        /// The ETag of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Etag { get; set; }

        /// <summary>
        /// List of insolvency cases.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cases", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Cases> Cases { get; set; } = new System.Collections.ObjectModel.Collection<Cases>();

        /// <summary>
        /// Company insolvency status details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CompanyInsolvencyStatus Status { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompanyUKEstablishments
    {
        /// <summary>
        /// The ETag of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Etag { get; set; }

        /// <summary>
        /// UK Establishment companies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CompanyUKEstablishmentsKind Kind { get; set; }

        /// <summary>
        /// UK Establishment Resources related to this company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Links { get; set; }

        /// <summary>
        /// List of UK Establishment companies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Items6> Items { get; set; } = new System.Collections.ObjectModel.Collection<Items6>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class List
    {
        /// <summary>
        /// The number of persons with significant control to return per page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items_per_page", Required = Newtonsoft.Json.Required.Always)]
        public int Items_per_page { get; set; }

        /// <summary>
        /// The list of persons with significant control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Items7> Items { get; set; } = new System.Collections.ObjectModel.Collection<Items7>();

        /// <summary>
        /// The offset into the entire result set that this page starts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start_index", Required = Newtonsoft.Json.Required.Always)]
        public int Start_index { get; set; }

        /// <summary>
        /// The total number of persons with significant control in this result set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total_results", Required = Newtonsoft.Json.Required.Always)]
        public int Total_results { get; set; }

        /// <summary>
        /// The number of active persons with significant control in this result set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("active_count", Required = Newtonsoft.Json.Required.Always)]
        public int Active_count { get; set; }

        /// <summary>
        /// The number of ceased persons with significant control in this result set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ceased_count", Required = Newtonsoft.Json.Required.Always)]
        public int Ceased_count { get; set; }

        /// <summary>
        /// A set of URLs related to the resource, including self.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Links { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Individual
    {
        /// <summary>
        /// The ETag of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Etag { get; set; }

        /// <summary>
        /// The date that Companies House was notified about this person with significant control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notified_on", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Notified_on { get; set; }

        /// <summary>
        /// The date that Companies House was notified about the cessation of this person with significant control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ceased_on", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Ceased_on { get; set; }

        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IndividualKind Kind { get; set; }

        /// <summary>
        /// The country of residence of the person with significant control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country_of_residence", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Country_of_residence { get; set; }

        /// <summary>
        /// The date of birth of the person with significant control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date_of_birth", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Date_of_birth { get; set; } = new object();

        /// <summary>
        /// Name of the person with significant control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// A document encapsulating the seperate elements of a person with significant control's name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name_elements", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Name_elements { get; set; } = new object();

        /// <summary>
        /// A set of URLs related to the resource, including self.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Links { get; set; } = new object();

        /// <summary>
        /// The nationality of the person with significant control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nationality", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Nationality { get; set; }

        /// <summary>
        /// The service address of the person with significant control. If given, this address will be shown on the public record instead of the residential address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Address { get; set; } = new object();

        /// <summary>
        /// Indicates the nature of control the person with significant control holds.
        /// <br/> For enumeration descriptions see `description` section in the [enumeration mappings](https://github.com/companieshouse/api-enumerations/blob/master/psc_descriptions.yml) file. 
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("natures_of_control", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<object> Natures_of_control { get; set; } = new System.Collections.ObjectModel.Collection<object>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IndividualBeneficialOwner
    {
        /// <summary>
        /// The ETag of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Etag { get; set; }

        /// <summary>
        /// The date that Companies House was notified about this beneficial owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notified_on", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Notified_on { get; set; }

        /// <summary>
        /// The date that Companies House was notified about the cessation of this beneficial owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ceased_on", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Ceased_on { get; set; }

        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IndividualBeneficialOwnerKind Kind { get; set; }

        /// <summary>
        /// The date of birth of the beneficial owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date_of_birth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Date_of_birth { get; set; }

        /// <summary>
        /// Name of the beneficial owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A document encapsulating the seperate elements of a beneficial owner's name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name_elements", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Name_elements { get; set; }

        /// <summary>
        /// A set of URLs related to the resource, including self.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Links { get; set; } = new object();

        /// <summary>
        /// The nationality of the beneficial owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nationality", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nationality { get; set; }

        /// <summary>
        /// The service address of the beneficial owner. If given, this address will be shown on the public record instead of the residential address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Address { get; set; }

        /// <summary>
        /// Indicates the nature of control the beneficial owner holds.
        /// <br/> For enumeration descriptions see `description` section in the [enumeration mappings](https://github.com/companieshouse/api-enumerations/blob/master/psc_descriptions.yml) file. 
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("natures_of_control", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Natures_of_control { get; set; }

        /// <summary>
        /// Flag indicating if the beneficial owner was declared as being sanctioned on the latest filing of the overseas entity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("is_sanctioned", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Is_sanctioned { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CorporateEntity
    {
        /// <summary>
        /// The ETag of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Etag { get; set; }

        /// <summary>
        /// The date that Companies House was notified about this person with significant control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notified_on", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Notified_on { get; set; }

        /// <summary>
        /// The date that Companies House was notified about the cessation of this person with significant control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ceased_on", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Ceased_on { get; set; }

        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CorporateEntityKind Kind { get; set; }

        /// <summary>
        /// Name of the person with significant control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// A set of URLs related to the resource, including self.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Links { get; set; } = new object();

        /// <summary>
        /// The address of the person with significant control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Address { get; set; } = new object();

        [Newtonsoft.Json.JsonProperty("identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Identification { get; set; } = new object();

        /// <summary>
        /// Indicates the nature of control the person with significant control holds.
        /// <br/> For enumeration descriptions see `description` section in the [enumeration mappings](https://github.com/companieshouse/api-enumerations/blob/master/psc_descriptions.yml) file. 
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("natures_of_control", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<object> Natures_of_control { get; set; } = new System.Collections.ObjectModel.Collection<object>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CorporateEntityBeneficialOwner
    {
        /// <summary>
        /// The ETag of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Etag { get; set; }

        /// <summary>
        /// The date that Companies House was notified about this beneficial owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notified_on", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Notified_on { get; set; }

        /// <summary>
        /// The date that Companies House was notified about the cessation of this beneficial owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ceased_on", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Ceased_on { get; set; }

        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CorporateEntityBeneficialOwnerKind Kind { get; set; }

        /// <summary>
        /// Name of the beneficial owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A set of URLs related to the resource, including self.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Links { get; set; } = new object();

        /// <summary>
        /// The address of the beneficial owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Address { get; set; }

        /// <summary>
        /// The principal/registered office address of a corporate-entity-beneficial-owner of a registered-overseas-entity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("principal_office_address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Principal_office_address { get; set; }

        [Newtonsoft.Json.JsonProperty("identification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Identification { get; set; }

        /// <summary>
        /// Indicates the nature of control the beneficial owner holds.
        /// <br/> For enumeration descriptions see `description` section in the [enumeration mappings](https://github.com/companieshouse/api-enumerations/blob/master/psc_descriptions.yml) file. 
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("natures_of_control", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Natures_of_control { get; set; }

        /// <summary>
        /// Flag indicating if the beneficial owner was declared as being sanctioned on the latest filing of the overseas entity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("is_sanctioned", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Is_sanctioned { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LegalPerson
    {
        /// <summary>
        /// The ETag of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Etag { get; set; }

        /// <summary>
        /// The date that Companies House was notified about this person with significant control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notified_on", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Notified_on { get; set; }

        /// <summary>
        /// The date that Companies House was notified about the cessation of this person with significant control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ceased_on", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Ceased_on { get; set; }

        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LegalPersonKind Kind { get; set; }

        /// <summary>
        /// Name of the person with significant control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// A set of URLs related to the resource, including self.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Links { get; set; } = new object();

        /// <summary>
        /// The address of the person with significant control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Address { get; set; } = new object();

        [Newtonsoft.Json.JsonProperty("identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Identification { get; set; } = new object();

        /// <summary>
        /// Indicates the nature of control the person with significant control holds.
        /// <br/> For enumeration descriptions see `description` section in the [enumeration mappings](https://github.com/companieshouse/api-enumerations/blob/master/psc_descriptions.yml) file. 
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("natures_of_control", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<object> Natures_of_control { get; set; } = new System.Collections.ObjectModel.Collection<object>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LegalPersonBeneficialOwner
    {
        /// <summary>
        /// The ETag of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Etag { get; set; }

        /// <summary>
        /// The date that Companies House was notified about this beneficial owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notified_on", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Notified_on { get; set; }

        /// <summary>
        /// The date that Companies House was notified about the cessation of this beneficial owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ceased_on", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Ceased_on { get; set; }

        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LegalPersonBeneficialOwnerKind Kind { get; set; }

        /// <summary>
        /// Name of the beneficial owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A set of URLs related to the resource, including self.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Links { get; set; } = new object();

        /// <summary>
        /// The address of the beneficial owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Address { get; set; }

        /// <summary>
        /// The principal/registered office address of a legal-person-beneficial-owner of a registered-overseas-entity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("principal_office_address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Principal_office_address { get; set; }

        [Newtonsoft.Json.JsonProperty("identification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Identification { get; set; }

        /// <summary>
        /// Indicates the nature of control the beneficial owner holds.
        /// <br/> For enumeration descriptions see `description` section in the [enumeration mappings](https://github.com/companieshouse/api-enumerations/blob/master/psc_descriptions.yml) file. 
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("natures_of_control", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Natures_of_control { get; set; }

        /// <summary>
        /// Flag indicating if the beneficial owner was declared as being sanctioned on the latest filing of the overseas entity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("is_sanctioned", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Is_sanctioned { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatementList
    {
        /// <summary>
        /// The number of persons with significant control statements to return per page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items_per_page", Required = Newtonsoft.Json.Required.Always)]
        public int Items_per_page { get; set; }

        /// <summary>
        /// The list of persons with significant control statements.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Items { get; set; } = new object();

        /// <summary>
        /// The offset into the entire result set that this page starts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start_index", Required = Newtonsoft.Json.Required.Always)]
        public int Start_index { get; set; }

        /// <summary>
        /// The total number of persons with significant control statements in this result set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total_results", Required = Newtonsoft.Json.Required.Always)]
        public int Total_results { get; set; }

        /// <summary>
        /// The number of active persons with significant control statements in this result set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("active_count", Required = Newtonsoft.Json.Required.Always)]
        public int Active_count { get; set; }

        /// <summary>
        /// The number of ceased persons with significant control statements in this result set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ceased_count", Required = Newtonsoft.Json.Required.Always)]
        public int Ceased_count { get; set; }

        /// <summary>
        /// A set of URLs related to the resource, including self.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Links { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SuperSecure
    {
        /// <summary>
        /// The ETag of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Etag { get; set; }

        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SuperSecureKind Kind { get; set; }

        /// <summary>
        /// Description of the super secure legal statement 
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SuperSecureDescription Description { get; set; }

        /// <summary>
        /// Presence of that indicator means the super secure person status is ceased 
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ceased", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Ceased { get; set; }

        /// <summary>
        /// A set of URLs related to the resource, including self.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Links { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SuperSecureBeneficialOwner
    {
        /// <summary>
        /// The ETag of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Etag { get; set; }

        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SuperSecureBeneficialOwnerKind Kind { get; set; }

        /// <summary>
        /// Description of the super secure legal statement 
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SuperSecureBeneficialOwnerDescription Description { get; set; }

        /// <summary>
        /// Presence of this indicator means the super secure beneficial owner status is ceased 
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ceased", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Ceased { get; set; }

        /// <summary>
        /// A set of URLs related to the resource, including self.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Links { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Schema3Country
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Wales")]
        Wales = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"England")]
        England = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Scotland")]
        Scotland = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Great Britain")]
        Great_Britain = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Not specified")]
        Not_specified = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"United Kingdom")]
        United_Kingdom = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Northern Ireland")]
        Northern_Ireland = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Schema5Kind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"search-results#dissolved-company")]
        SearchResults_dissolvedCompany = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Registered_office_address
    {
        /// <summary>
        /// The first line of the address e.g Crown Way
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address_line_1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address_line_1 { get; set; }

        /// <summary>
        /// The second line of the address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address_line_2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address_line_2 { get; set; }

        /// <summary>
        /// The town associated to the ROA e.g Cardiff
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locality", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locality { get; set; }

        /// <summary>
        /// The postal code e.g CF14 3UZ
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postal_code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Postal_code { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Matched_previous_company_name
    {
        /// <summary>
        /// The company number of the dissolved company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company_number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Company_number { get; set; }

        /// <summary>
        /// The date that the company ceased being known under the company name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ceased_on", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Ceased_on { get; set; }

        /// <summary>
        /// The date that the company started being known under the company name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("effective_from", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Effective_from { get; set; }

        /// <summary>
        /// The previous name of the company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Schema6Kind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"search-results#alphabetical-search")]
        SearchResults_alphabeticalSearch = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Links
    {
        /// <summary>
        /// The link to the company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company_profile", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Company_profile { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Schema7Company_status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"active")]
        Active = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"dissolved")]
        Dissolved = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"open")]
        Open = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"closed")]
        Closed = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"converted-closed")]
        ConvertedClosed = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"receivership")]
        Receivership = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"administration")]
        Administration = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"liquidation")]
        Liquidation = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"insolvency-proceedings")]
        InsolvencyProceedings = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"voluntary-arrangement")]
        VoluntaryArrangement = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"registered")]
        Registered = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"removed")]
        Removed = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Schema7Company_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"private-unlimited")]
        PrivateUnlimited = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ltd")]
        Ltd = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"plc")]
        Plc = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"old-public-company")]
        OldPublicCompany = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"private-limited-guarant-nsc-limited-exemption")]
        PrivateLimitedGuarantNscLimitedExemption = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"limited-partnership")]
        LimitedPartnership = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"private-limited-guarant-nsc")]
        PrivateLimitedGuarantNsc = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"converted-or-closed")]
        ConvertedOrClosed = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"private-unlimited-nsc")]
        PrivateUnlimitedNsc = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"private-limited-shares-section-30-exemption")]
        PrivateLimitedSharesSection30Exemption = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"protected-cell-company")]
        ProtectedCellCompany = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"assurance-company")]
        AssuranceCompany = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"oversea-company")]
        OverseaCompany = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"eeig")]
        Eeig = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"icvc-securities")]
        IcvcSecurities = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"icvc-warrant")]
        IcvcWarrant = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"icvc-umbrella")]
        IcvcUmbrella = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"registered-society-non-jurisdictional")]
        RegisteredSocietyNonJurisdictional = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"industrial-and-provident-society")]
        IndustrialAndProvidentSociety = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"northern-ireland")]
        NorthernIreland = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"northern-ireland-other")]
        NorthernIrelandOther = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"royal-charter")]
        RoyalCharter = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"investment-company-with-variable-capital")]
        InvestmentCompanyWithVariableCapital = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"unregistered-company")]
        UnregisteredCompany = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"llp")]
        Llp = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"european-public-limited-liability-company-se")]
        EuropeanPublicLimitedLiabilityCompanySe = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"uk-establishment")]
        UkEstablishment = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"scottish-partnership")]
        ScottishPartnership = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"charitable-incorporated-organisation")]
        CharitableIncorporatedOrganisation = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"scottish-charitable-incorporated-organisation")]
        ScottishCharitableIncorporatedOrganisation = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"further-education-or-sixth-form-college-corporation")]
        FurtherEducationOrSixthFormCollegeCorporation = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"registered-overseas-entity")]
        RegisteredOverseasEntity = 32,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Schema7Company_subtype
    {

        [System.Runtime.Serialization.EnumMember(Value = @"community-interest-company")]
        CommunityInterestCompany = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"private-fund-limited-partnership")]
        PrivateFundLimitedPartnership = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Schema7Kind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"search-results#company")]
        SearchResults_company = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Links2
    {
        /// <summary>
        /// The link to the company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company_profile", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Company_profile { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Registered_office_address2
    {
        /// <summary>
        /// The first line of the address e.g Crown Way
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address_line_1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address_line_1 { get; set; }

        /// <summary>
        /// The second line of the address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address_line_2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address_line_2 { get; set; }

        /// <summary>
        /// The town associated to the ROA e.g Cardiff
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locality", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locality { get; set; }

        /// <summary>
        /// The postal code e.g CF14 3UZ
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postal_code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Postal_code { get; set; }

        /// <summary>
        /// The region e.g Surrey.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("region", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Region { get; set; }

        /// <summary>
        /// The country.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Registered_office_address2Country Country { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Schema8Officer_role
    {

        [System.Runtime.Serialization.EnumMember(Value = @"cic-manager")]
        CicManager = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"corporate-director")]
        CorporateDirector = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"corporate-llp-designated-member")]
        CorporateLlpDesignatedMember = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"corporate-llp-member")]
        CorporateLlpMember = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"corporate-manager-of-an-eeig")]
        CorporateManagerOfAnEeig = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"corporate-managing-officer")]
        CorporateManagingOfficer = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"corporate-member-of-a-management-organ")]
        CorporateMemberOfAManagementOrgan = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"corporate-member-of-a-supervisory-organ")]
        CorporateMemberOfASupervisoryOrgan = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"corporate-member-of-an-administrative-organ")]
        CorporateMemberOfAnAdministrativeOrgan = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"corporate-nominee-director")]
        CorporateNomineeDirector = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"corporate-nominee-secretary")]
        CorporateNomineeSecretary = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"corporate-secretary")]
        CorporateSecretary = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"director")]
        Director = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"general-partner-in-a-limited-partnership")]
        GeneralPartnerInALimitedPartnership = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"judicial-factor")]
        JudicialFactor = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"limited-partner-in-a-limited-partnership")]
        LimitedPartnerInALimitedPartnership = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"llp-designated-member")]
        LlpDesignatedMember = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"llp-member")]
        LlpMember = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"manager-of-an-eeig")]
        ManagerOfAnEeig = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"managing-officer")]
        ManagingOfficer = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"member-of-a-management-organ")]
        MemberOfAManagementOrgan = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"member-of-a-supervisory-organ")]
        MemberOfASupervisoryOrgan = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"member-of-an-administrative-organ")]
        MemberOfAnAdministrativeOrgan = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"nominee-director")]
        NomineeDirector = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"nominee-secretary")]
        NomineeSecretary = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"person-authorised-to-accept")]
        PersonAuthorisedToAccept = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"person-authorised-to-represent")]
        PersonAuthorisedToRepresent = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"person-authorised-to-represent-and-accept")]
        PersonAuthorisedToRepresentAndAccept = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"receiver-and-manager")]
        ReceiverAndManager = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"secretary")]
        Secretary = 29,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Former_names
    {
        /// <summary>
        /// Former forenames of the officer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("forenames", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Forenames { get; set; }

        /// <summary>
        /// Former surnames of the officer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surname", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Surname { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Errors
    {
        /// <summary>
        /// Type of error
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ErrorsType Type { get; set; }

        /// <summary>
        /// Describes the type of location returned so that it may be parsed appropriately
        /// </summary>
        [Newtonsoft.Json.JsonProperty("location_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ErrorsLocation_type Location_type { get; set; }

        /// <summary>
        /// The location in the submitted request in which the error relates. This parameter is only provided when errors[].type is set to "ch:validation".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location { get; set; }

        /// <summary>
        /// The error being returned. See github for valid [enumeration types](https://github.com/companieshouse/api-enumerations/blob/develop/errors.yml)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Error { get; set; }

        /// <summary>
        /// A collection of argument name and value pairs which, when substituted into the error string, provide the full description of the error. As many name/value pairs as necessary to complete the error description are returned. See &lt;a href=""&gt;example&lt;/a&gt; above.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("error_values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_values> Error_values { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Schema10Register_moved_to
    {

        [System.Runtime.Serialization.EnumMember(Value = @"public-register")]
        PublicRegister = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"registered-office")]
        RegisteredOffice = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"single-alternative-inspection-location")]
        SingleAlternativeInspectionLocation = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"unspecified-location")]
        UnspecifiedLocation = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Annotations
    {
        /// <summary>
        /// The annotation text.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("annotation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Annotation { get; set; }

        /// <summary>
        /// The date the annotation was added.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date { get; set; }

        /// <summary>
        /// A description of the annotation.
        /// <br/> For enumeration descriptions see `description` section in the [enumeration mappings](https://github.com/companieshouse/api-enumerations/blob/master/filing_history_descriptions.yml) file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Associated_filings
    {
        /// <summary>
        /// The date the associated filing was processed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date { get; set; }

        /// <summary>
        /// A description of the associated filing.
        /// <br/> For enumeration descriptions see `description` section in the [enumeration mappings](https://github.com/companieshouse/api-enumerations/blob/master/filing_history_descriptions.yml) file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>
        /// The type of the associated filing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Schema11Category
    {

        [System.Runtime.Serialization.EnumMember(Value = @"accounts")]
        Accounts = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"address")]
        Address = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"annual-return")]
        AnnualReturn = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"capital")]
        Capital = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"change-of-name")]
        ChangeOfName = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"incorporation")]
        Incorporation = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"liquidation")]
        Liquidation = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"miscellaneous")]
        Miscellaneous = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"mortgage")]
        Mortgage = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"officers")]
        Officers = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"resolution")]
        Resolution = 10,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Resolutions
    {
        /// <summary>
        /// The category of the resolution filed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResolutionsCategory Category { get; set; }

        /// <summary>
        /// A description of the associated filing.
        /// <br/> For enumeration descriptions see `description` section in the [enumeration mappings] (https://github.com/companieshouse/api-enumerations/blob/master/filing_history_descriptions.yml) file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>
        /// The document id of the resolution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("document_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Document_id { get; set; }

        /// <summary>
        /// The date the resolution was processed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("receive_date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Receive_date { get; set; }

        /// <summary>
        /// The sub-category of the document filed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subcategory", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResolutionsSubcategory Subcategory { get; set; }

        /// <summary>
        /// The type of the associated filing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Schema11Subcategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"resolution")]
        Resolution = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Last_variation
    {
        /// <summary>
        /// The date the variation was made against the disqualification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("varied_on", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Varied_on { get; set; }

        /// <summary>
        /// The case identifier of the variation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("case_identifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Case_identifier { get; set; }

        /// <summary>
        /// The name of the court that handled the variation case.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("court_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Court_name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Classification
    {
        /// <summary>
        /// The type of charge classication.
        /// <br/> For enumeration descriptions see `classificationDesc` section in the [enumeration mappings](https://github.com/companieshouse/api-enumerations/blob/master/mortgage_descriptions.yml)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ClassificationType Type { get; set; }

        /// <summary>
        /// Details of the charge classification
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Schema17Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"outstanding")]
        Outstanding = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"fully-satisfied")]
        FullySatisfied = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"part-satisfied")]
        PartSatisfied = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"satisfied")]
        Satisfied = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Schema17Assests_ceased_released
    {

        [System.Runtime.Serialization.EnumMember(Value = @"property-ceased-to-belong")]
        PropertyCeasedToBelong = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"part-property-release-and-ceased-to-belong")]
        PartPropertyReleaseAndCeasedToBelong = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"part-property-released")]
        PartPropertyReleased = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"part-property-ceased-to-belong")]
        PartPropertyCeasedToBelong = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"whole-property-released")]
        WholePropertyReleased = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"multiple-filings")]
        MultipleFilings = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"whole-property-released-and-ceased-to-belong")]
        WholePropertyReleasedAndCeasedToBelong = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Particulars
    {
        /// <summary>
        /// The type of charge particulars.
        /// <br/> For enumeration descriptions see `particular-description` section in the [enumeration mappings](https://github.com/companieshouse/api-enumerations/blob/master/mortgage_descriptions.yml)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ParticularsType Type { get; set; }

        /// <summary>
        /// Details of charge particulars
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>
        /// The charge contains a floating charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contains_floating_charge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Contains_floating_charge { get; set; }

        /// <summary>
        /// The charge contains a fixed charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contains_fixed_charge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Contains_fixed_charge { get; set; }

        /// <summary>
        /// The floating charge covers all the property or undertaking or the company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("floating_charge_covers_all", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Floating_charge_covers_all { get; set; }

        /// <summary>
        /// The charge contains a negative pledge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contains_negative_pledge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Contains_negative_pledge { get; set; }

        /// <summary>
        /// The chargor is acting as a bare trustee for the property
        /// </summary>
        [Newtonsoft.Json.JsonProperty("chargor_acting_as_bare_trustee", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Chargor_acting_as_bare_trustee { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Secured_details
    {
        /// <summary>
        /// The type of secured details.
        /// <br/> For enumeration descriptions see `secured-details-description` section in the [enumeration mappings](https://github.com/companieshouse/api-enumerations/blob/master/mortgage_descriptions.yml)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Secured_detailsType Type { get; set; }

        /// <summary>
        /// Details of the amount or obligation secured by the charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Scottish_alterations
    {
        /// <summary>
        /// The charge has alterations to order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("has_alterations_to_order", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Has_alterations_to_order { get; set; }

        /// <summary>
        /// The charge has alterations to prohibitions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("has_alterations_to_prohibitions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Has_alterations_to_prohibitions { get; set; }

        /// <summary>
        /// The charge has provisions restricting the creation of further charges
        /// </summary>
        [Newtonsoft.Json.JsonProperty("has_alterations_to_provisions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Has_alterations_to_provisions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Persons_entitled
    {
        /// <summary>
        /// The name of the person entitled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Transactions
    {
        /// <summary>
        /// Filing type which created, updated or satisfied the charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filing_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Filing_type { get; set; }

        /// <summary>
        /// The date the filing was submitted to Companies House
        /// </summary>
        [Newtonsoft.Json.JsonProperty("delivered_on", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Delivered_on { get; set; }

        /// <summary>
        /// The insolvency case related to this filing
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insolvency_case_number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Insolvency_case_number { get; set; }

        /// <summary>
        /// The resources related to this filing
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Links5> Links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Insolvency_cases
    {
        /// <summary>
        /// The number of this insolvency case
        /// </summary>
        [Newtonsoft.Json.JsonProperty("case_number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Case_number { get; set; }

        /// <summary>
        /// The resources related to this insolvency case
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Links6> Links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Links3
    {
        /// <summary>
        /// Link to the this charge data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Self { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Schema24Kind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"persons-with-significant-control-statement")]
        PersonsWithSignificantControlStatement = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Schema24Restrictions_notice_withdrawal_reason
    {

        [System.Runtime.Serialization.EnumMember(Value = @"restrictions-notice-withdrawn-by-court-order")]
        RestrictionsNoticeWithdrawnByCourtOrder = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"restrictions-notice-withdrawn-by-company")]
        RestrictionsNoticeWithdrawnByCompany = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Schema24Statement
    {

        [System.Runtime.Serialization.EnumMember(Value = @"no-individual-or-entity-with-signficant-control")]
        NoIndividualOrEntityWithSignficantControl = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"steps-to-find-psc-not-yet-completed")]
        StepsToFindPscNotYetCompleted = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"psc-exists-but-not-identified")]
        PscExistsButNotIdentified = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"psc-details-not-confirmed")]
        PscDetailsNotConfirmed = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"psc-contacted-but-no-response")]
        PscContactedButNoResponse = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"restrictions-notice-issued-to-psc")]
        RestrictionsNoticeIssuedToPsc = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"psc-has-failed-to-confirm-changed-details")]
        PscHasFailedToConfirmChangedDetails = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RegisteredOfficeAddressKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"registered-office-address")]
        RegisteredOfficeAddress = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RegisteredOfficeAddressCountry
    {

        [System.Runtime.Serialization.EnumMember(Value = @"England")]
        England = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Wales")]
        Wales = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Scotland")]
        Scotland = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Northern Ireland")]
        Northern_Ireland = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Great Britain")]
        Great_Britain = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"United Kingdom")]
        United_Kingdom = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Not specified")]
        Not_specified = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CompanyProfileJurisdiction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"england-wales")]
        EnglandWales = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"wales")]
        Wales = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"scotland")]
        Scotland = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"northern-ireland")]
        NorthernIreland = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"european-union")]
        EuropeanUnion = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"united-kingdom")]
        UnitedKingdom = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"england")]
        England = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"noneu")]
        Noneu = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Previous_company_names
    {
        /// <summary>
        /// The previous company name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The date from which the company name was effective.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("effective_from", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Effective_from { get; set; }

        /// <summary>
        /// The date on which the company name ceased.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ceased_on", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Ceased_on { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CompanyProfileCompany_status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"active")]
        Active = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"dissolved")]
        Dissolved = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"liquidation")]
        Liquidation = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"receivership")]
        Receivership = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"administration")]
        Administration = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"voluntary-arrangement")]
        VoluntaryArrangement = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"converted-closed")]
        ConvertedClosed = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"insolvency-proceedings")]
        InsolvencyProceedings = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"registered")]
        Registered = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"removed")]
        Removed = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"closed")]
        Closed = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"open")]
        Open = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CompanyProfileCompany_status_detail
    {

        [System.Runtime.Serialization.EnumMember(Value = @"transferred-from-uk")]
        TransferredFromUk = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"active-proposal-to-strike-off")]
        ActiveProposalToStrikeOff = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"petition-to-restore-dissolved")]
        PetitionToRestoreDissolved = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"transformed-to-se")]
        TransformedToSe = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"converted-to-plc")]
        ConvertedToPlc = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CompanyProfileType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"private-unlimited")]
        PrivateUnlimited = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ltd")]
        Ltd = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"plc")]
        Plc = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"old-public-company")]
        OldPublicCompany = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"private-limited-guarant-nsc-limited-exemption")]
        PrivateLimitedGuarantNscLimitedExemption = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"limited-partnership")]
        LimitedPartnership = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"private-limited-guarant-nsc")]
        PrivateLimitedGuarantNsc = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"converted-or-closed")]
        ConvertedOrClosed = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"private-unlimited-nsc")]
        PrivateUnlimitedNsc = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"private-limited-shares-section-30-exemption")]
        PrivateLimitedSharesSection30Exemption = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"protected-cell-company")]
        ProtectedCellCompany = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"assurance-company")]
        AssuranceCompany = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"oversea-company")]
        OverseaCompany = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"eeig")]
        Eeig = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"icvc-securities")]
        IcvcSecurities = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"icvc-warrant")]
        IcvcWarrant = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"icvc-umbrella")]
        IcvcUmbrella = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"registered-society-non-jurisdictional")]
        RegisteredSocietyNonJurisdictional = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"industrial-and-provident-society")]
        IndustrialAndProvidentSociety = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"northern-ireland")]
        NorthernIreland = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"northern-ireland-other")]
        NorthernIrelandOther = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"royal-charter")]
        RoyalCharter = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"investment-company-with-variable-capital")]
        InvestmentCompanyWithVariableCapital = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"unregistered-company")]
        UnregisteredCompany = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"llp")]
        Llp = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"european-public-limited-liability-company-se")]
        EuropeanPublicLimitedLiabilityCompanySe = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"uk-establishment")]
        UkEstablishment = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"scottish-partnership")]
        ScottishPartnership = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"charitable-incorporated-organisation")]
        CharitableIncorporatedOrganisation = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"scottish-charitable-incorporated-organisation")]
        ScottishCharitableIncorporatedOrganisation = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"further-education-or-sixth-form-college-corporation")]
        FurtherEducationOrSixthFormCollegeCorporation = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"registered-overseas-entity")]
        RegisteredOverseasEntity = 32,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SearchKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"search#all")]
        Search_all = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Items : Schema2
    {
        /// <summary>
        /// The type of search result. Refer to the full resource descriptions [CompanySearch resource](api/docs/company/company_number/CompanySearch-resource.html)  [OfficerSearch resource] (api/docs/company/company_number/OfficerSearch-resource.html) and [DisqualifiedOfficerSearch resource](api/docs/company/company_number/DisqualifiedOfficerSearch-resource.html) for the full list of members returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ItemsKind Kind { get; set; }

        /// <summary>
        /// An array of enumeration types that make up the search description. See search_descriptions_raw.yaml in api-enumerations
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description_identifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Description_identifier> Description_identifier { get; set; }

        /// <summary>
        /// The address of the company's registered office.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Address { get; set; } = new object();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CompanySearchKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"search#companies")]
        Search_companies = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Items2 : Schema2
    {
        /// <summary>
        /// The type of search result.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Items2Kind Kind { get; set; }

        /// <summary>
        /// An array of enumeration types that make up the search description. See search_descriptions_raw.yaml in api-enumerations
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description_identifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Description_identifier2> Description_identifier { get; set; }

        /// <summary>
        /// The company registration / incorporation number of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company_number", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Company_number { get; set; }

        /// <summary>
        /// The date the company was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date_of_creation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date_of_creation { get; set; }

        /// <summary>
        /// The date the company ended.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date_of_cessation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date_of_cessation { get; set; }

        /// <summary>
        /// The company type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Items2Company_type Company_type { get; set; }

        /// <summary>
        /// The company status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company_status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Items2Company_status Company_status { get; set; }

        /// <summary>
        /// The address of the company's registered office.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Address { get; set; } = new object();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OfficerSearchKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"search#officers")]
        Search_officers = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Items3 : Schema2
    {
        /// <summary>
        /// Describes the type of result returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Items3Kind Kind { get; set; }

        /// <summary>
        /// The officer date of birth details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date_of_birth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Date_of_birth { get; set; }

        /// <summary>
        /// The total number of appointments the officer has.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("appointment_count", Required = Newtonsoft.Json.Required.Always)]
        public int Appointment_count { get; set; }

        /// <summary>
        /// An array of enumeration types that make up the search description. See search_descriptions_raw.yaml in api-enumerations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description_identifiers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Description_identifiers> Description_identifiers { get; set; }

        /// <summary>
        /// The service address of the officer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Address { get; set; } = new object();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DisqualifiedOfficerSearchKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"search#disqualified-officers")]
        Search_disqualifiedOfficers = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Items4 : Schema2
    {
        /// <summary>
        /// Describes the type of result returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Items4Kind Kind { get; set; }

        /// <summary>
        /// The disqualified officer's date of birth.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date_of_birth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date_of_birth { get; set; }

        /// <summary>
        /// An array of enumeration types that make up the search description. See search_descriptions_raw.yaml in api-enumerations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description_identifiers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Description_identifiers2> Description_identifiers { get; set; }

        /// <summary>
        /// The address of the disqualified officer as provided by the disqualifying authority.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Address { get; set; } = new object();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous
    {
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Schema5> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Kind Kind { get; set; }

        [Newtonsoft.Json.JsonProperty("top_hit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Top_hit Top_hit { get; set; }

        /// <summary>
        /// The number of hits returned on a best-match or previous-company-names search
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hits { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous2
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Schema6> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Kind2 Kind { get; set; }

        [Newtonsoft.Json.JsonProperty("top_hit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Top_hit2 Top_hit { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous3
    {
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Schema7> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Kind3 Kind { get; set; }

        [Newtonsoft.Json.JsonProperty("top_hit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Top_hit3 Top_hit { get; set; }

        /// <summary>
        /// The number of matches found using advanced search
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hits { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OfficerListKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"officer-list")]
        OfficerList = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CompanyRegisterKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"registers")]
        Registers = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FilingHistoryListFiling_history_status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"filing-history-available")]
        FilingHistoryAvailable = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FilingHistoryListKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"filing-history")]
        FilingHistory = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Links4
    {
        /// <summary>
        /// The URL of this resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Self { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CompanyExemptionsKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"exemptions")]
        Exemptions = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NaturalDisqualificationKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"natural-disqualification")]
        NaturalDisqualification = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CorporateDisqualificationKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"corporate-disqualification")]
        CorporateDisqualification = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Items5
    {
        /// <summary>
        /// The correspondence address of the officer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Address { get; set; } = new object();

        /// <summary>
        /// The date the officer was appointed before. Only present when the `is_pre_1992_appointment` attribute is `true`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("appointed_before", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Appointed_before { get; set; }

        /// <summary>
        /// The date on which the officer was appointed. For the officer roles of `corporate-managing-officer` and `managing-officer` this is the date on which Companies House was notified about the officer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("appointed_on", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Appointed_on { get; set; }

        /// <summary>
        /// The company information of the appointment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("appointed_to", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Appointed_to { get; set; } = new object();

        /// <summary>
        /// The contact at the `corporate-managing-officer` of a `registered-overseas-entity`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contact_details", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Contact_details { get; set; }

        /// <summary>
        /// The full name of the officer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The officer's country of residence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country_of_residence", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country_of_residence { get; set; }

        /// <summary>
        /// Former names for the officer, if there are any.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("former_names", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Former_names2> Former_names { get; set; }

        /// <summary>
        /// Only one from `eea`, `non-eea`, `uk-limited`, `other-corporate-body-or-firm` or `registered-overseas-entity-corporate-managing-officer` can be supplied, not multiples of them.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Identification { get; set; }

        /// <summary>
        /// Indicator representing if the officer was appointed before their appointment date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("is_pre_1992_appointment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Is_pre_1992_appointment { get; set; }

        /// <summary>
        /// Links to other resources associated with this officer appointment item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Links { get; set; } = new object();

        /// <summary>
        /// A document encapsulating the separate elements of a natural officer's name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name_elements", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Name_elements { get; set; }

        /// <summary>
        /// The officer's nationality.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nationality", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nationality { get; set; }

        /// <summary>
        /// The officer's occupation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("occupation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Occupation { get; set; }

        [Newtonsoft.Json.JsonProperty("officer_role", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Items5Officer_role Officer_role { get; set; }

        /// <summary>
        /// The principal/registered office address of a `corporate-managing-officer` of a `registered-overseas-entity`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("principal_office_address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Principal_office_address { get; set; }

        /// <summary>
        /// The date the officer was resigned. For the officer roles of `corporate-managing-officer` and `managing-officer` this is the date on which Companies House was notified about the officers cessation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resigned_on", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Resigned_on { get; set; }

        /// <summary>
        /// The responsibilities of the managing officer of a `registered-overseas-entity`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("responsibilities", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Responsibilities { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AppointmentListKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"personal-appointment")]
        PersonalAppointment = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Cases
    {
        /// <summary>
        /// The type of case.
        /// <br/> For enumeration descriptions see `insolvency_case_type` section in the [enumeration mappings] (https://github.com/companieshouse/api-enumerations/blob/master/constants.yml).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CasesType Type { get; set; }

        /// <summary>
        /// The dates specific to the case.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dates", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Dates> Dates { get; set; } = new System.Collections.ObjectModel.Collection<Dates>();

        /// <summary>
        /// The dates specific to the case.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Notes { get; set; }

        /// <summary>
        /// The practitioners for the case.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("practitioners", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Practitioners> Practitioners { get; set; } = new System.Collections.ObjectModel.Collection<Practitioners>();

        /// <summary>
        /// The practitioners for the case.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Links { get; set; }

        /// <summary>
        /// The case number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CompanyInsolvencyStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"live-propopsed-transfer-from-gb")]
        LivePropopsedTransferFromGb = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"voluntary-arrangement")]
        VoluntaryArrangement = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"voluntary-arrangement-receivership")]
        VoluntaryArrangementReceivership = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"live-receiver-manager-on-at-least-one-charge")]
        LiveReceiverManagerOnAtLeastOneCharge = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"receiver-manager-or-administrative-receiver")]
        ReceiverManagerOrAdministrativeReceiver = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"receiver-manager")]
        ReceiverManager = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"administrative-receiver")]
        AdministrativeReceiver = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"administration-order")]
        AdministrationOrder = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"receivership")]
        Receivership = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"in-administration")]
        InAdministration = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CompanyUKEstablishmentsKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ukestablishment-companies")]
        UkestablishmentCompanies = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Items6
    {
        /// <summary>
        /// The number of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company_number", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Company_number { get; set; }

        /// <summary>
        /// The name of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Company_name { get; set; }

        /// <summary>
        /// Company status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company_status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Company_status { get; set; }

        /// <summary>
        /// The locality e.g London.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locality", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locality { get; set; }

        /// <summary>
        /// Resources related to this company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Links { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Items7
    {
        /// <summary>
        /// The ETag of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Etag { get; set; }

        /// <summary>
        /// The date that Companies House was notified about this person with significant control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notified_on", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Notified_on { get; set; }

        /// <summary>
        /// The date that Companies House was notified about the cessation of this person with significant control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ceased_on", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Ceased_on { get; set; }

        /// <summary>
        /// The country of residence of the person with significant control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country_of_residence", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country_of_residence { get; set; }

        /// <summary>
        /// The date of birth of the person with significant control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date_of_birth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Date_of_birth { get; set; }

        /// <summary>
        /// Name of the person with significant control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// A document encapsulating the separate elements of a person with significant control's name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name_elements", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Name_elements { get; set; }

        /// <summary>
        /// A set of URLs related to the resource, including self.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Links { get; set; } = new object();

        /// <summary>
        /// The nationality of the person with significant control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nationality", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nationality { get; set; }

        [Newtonsoft.Json.JsonProperty("identification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Identification { get; set; }

        /// <summary>
        /// Presence of that indicator means the super secure person status is ceased &lt;br /&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ceased", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Ceased { get; set; }

        /// <summary>
        /// Description of the super secure legal statement &lt;br /&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Items7Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Items7Kind Kind { get; set; }

        /// <summary>
        /// The service address of the person with significant control. If given, this address will be shown on the public record instead of the residential address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Address { get; set; } = new object();

        /// <summary>
        /// Indicates the nature of control the person with significant control holds.
        /// <br/> For enumeration descriptions see `description` section in the [enumeration mappings](https://github.com/companieshouse/api-enumerations/blob/master/psc_descriptions.yml) file. 
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("natures_of_control", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Natures_of_control { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// Flag indicating if the beneficial owner was declared as being sanctioned on the latest filing of the overseas entity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("is_sanctioned", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Is_sanctioned { get; set; }

        /// <summary>
        /// The principal/registered office address of a corporate-entity-beneficial-owner or legal-person-beneficial-owner of a registered-overseas-entity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("principal_office_address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Principal_office_address { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IndividualKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"individual-person-with-significant-control")]
        IndividualPersonWithSignificantControl = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IndividualBeneficialOwnerKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"individual-beneficial-owner")]
        IndividualBeneficialOwner = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CorporateEntityKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"corporate-entity-person-with-significant-control")]
        CorporateEntityPersonWithSignificantControl = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CorporateEntityBeneficialOwnerKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"corporate-entity-beneficial-owner")]
        CorporateEntityBeneficialOwner = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LegalPersonKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"legal-person-person-with-significant-control")]
        LegalPersonPersonWithSignificantControl = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LegalPersonBeneficialOwnerKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"legal-person-beneficial-owner")]
        LegalPersonBeneficialOwner = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SuperSecureKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"super-secure-person-with-significant-control")]
        SuperSecurePersonWithSignificantControl = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SuperSecureDescription
    {

        [System.Runtime.Serialization.EnumMember(Value = @"super-secure-persons-with-significant-control")]
        SuperSecurePersonsWithSignificantControl = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SuperSecureBeneficialOwnerKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"super-secure-beneficial-owner")]
        SuperSecureBeneficialOwner = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SuperSecureBeneficialOwnerDescription
    {

        [System.Runtime.Serialization.EnumMember(Value = @"super-secure-beneficial-owner")]
        SuperSecureBeneficialOwner = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Registered_office_address2Country
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Wales")]
        Wales = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"England")]
        England = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Scotland")]
        Scotland = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Great Britain")]
        Great_Britain = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Not specified")]
        Not_specified = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"United Kingdom")]
        United_Kingdom = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Northern Ireland")]
        Northern_Ireland = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ErrorsType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ch:service")]
        ChService = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ch:validation")]
        ChValidation = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ErrorsLocation_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"json-path")]
        JsonPath = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"query-parameter")]
        QueryParameter = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error_values
    {
        /// <summary>
        /// The element name and value pair required to complete the error description, will repeat as necessary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("argument", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Argument { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ResolutionsCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"miscellaneous")]
        Miscellaneous = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ResolutionsSubcategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"resolution")]
        Resolution = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ClassificationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"charge-description")]
        ChargeDescription = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"nature-of-charge")]
        NatureOfCharge = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ParticularsType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"short-particulars")]
        ShortParticulars = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"charged-property-description")]
        ChargedPropertyDescription = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"charged-property-or-undertaking-description")]
        ChargedPropertyOrUndertakingDescription = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"brief-description")]
        BriefDescription = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Secured_detailsType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"amount-secured")]
        AmountSecured = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"obligations-secured")]
        ObligationsSecured = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Links5
    {
        /// <summary>
        /// Link to the charge filing data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Filing { get; set; }

        /// <summary>
        /// Link to the insolvency case related to this filing
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insolvency_case", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Insolvency_case { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Links6
    {
        /// <summary>
        /// Link to the insolvency case data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("case", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Case { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ItemsKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"searchresults#company")]
        Searchresults_company = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"searchresults#officer")]
        Searchresults_officer = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"searchresults#disqualified-officer")]
        Searchresults_disqualifiedOfficer = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Description_identifier
    {

        [System.Runtime.Serialization.EnumMember(Value = @"incorporated-on")]
        IncorporatedOn = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"registered-on")]
        RegisteredOn = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"formed-on")]
        FormedOn = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"dissolved-on")]
        DissolvedOn = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"converted-closed-on")]
        ConvertedClosedOn = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"closed-on")]
        ClosedOn = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"closed")]
        Closed = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"first-uk-establishment-opened-on")]
        FirstUkEstablishmentOpenedOn = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"opened-on")]
        OpenedOn = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"voluntary-arrangement")]
        VoluntaryArrangement = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"receivership")]
        Receivership = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"insolvency-proceedings")]
        InsolvencyProceedings = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"liquidation")]
        Liquidation = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"administration")]
        Administration = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"appointment-count")]
        AppointmentCount = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"born-on")]
        BornOn = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"registered")]
        Registered = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"removed")]
        Removed = 17,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Items2Kind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"searchresults#company")]
        Searchresults_company = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Description_identifier2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"incorporated-on")]
        IncorporatedOn = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"registered-on")]
        RegisteredOn = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"formed-on")]
        FormedOn = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"dissolved-on")]
        DissolvedOn = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"converted-closed-on")]
        ConvertedClosedOn = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"closed-on")]
        ClosedOn = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"closed")]
        Closed = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"first-uk-establishment-opened-on")]
        FirstUkEstablishmentOpenedOn = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"opened-on")]
        OpenedOn = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"voluntary-arrangement")]
        VoluntaryArrangement = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"receivership")]
        Receivership = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"insolvency-proceedings")]
        InsolvencyProceedings = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"liquidation")]
        Liquidation = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"administration")]
        Administration = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"registered")]
        Registered = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"removed")]
        Removed = 15,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Items2Company_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"private-unlimited")]
        PrivateUnlimited = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ltd")]
        Ltd = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"plc")]
        Plc = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"old-public-company")]
        OldPublicCompany = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"private-limited-guarant-nsc-limited-exemption")]
        PrivateLimitedGuarantNscLimitedExemption = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"limited-partnership")]
        LimitedPartnership = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"private-limited-guarant-nsc")]
        PrivateLimitedGuarantNsc = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"converted-or-closed")]
        ConvertedOrClosed = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"private-unlimited-nsc")]
        PrivateUnlimitedNsc = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"private-limited-shares-section-30-exemption")]
        PrivateLimitedSharesSection30Exemption = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"assurance-company")]
        AssuranceCompany = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"oversea-company")]
        OverseaCompany = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"eeig")]
        Eeig = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"icvc-securities")]
        IcvcSecurities = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"icvc-warrant")]
        IcvcWarrant = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"icvc-umbrella")]
        IcvcUmbrella = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"industrial-and-provident-society")]
        IndustrialAndProvidentSociety = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"northern-ireland")]
        NorthernIreland = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"northern-ireland-other")]
        NorthernIrelandOther = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"royal-charter")]
        RoyalCharter = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"investment-company-with-variable-capital")]
        InvestmentCompanyWithVariableCapital = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"unregistered-company")]
        UnregisteredCompany = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"llp")]
        Llp = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"european-public-limited-liability-company-se")]
        EuropeanPublicLimitedLiabilityCompanySe = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"registered-overseas-entity")]
        RegisteredOverseasEntity = 25,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Items2Company_status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"active")]
        Active = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"dissolved")]
        Dissolved = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"liquidation")]
        Liquidation = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"receivership")]
        Receivership = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"administration")]
        Administration = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"voluntary-arrangement")]
        VoluntaryArrangement = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"converted-closed")]
        ConvertedClosed = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"insolvency-proceedings")]
        InsolvencyProceedings = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"registered")]
        Registered = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"removed")]
        Removed = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Items3Kind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"searchresults#officer")]
        Searchresults_officer = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Description_identifiers
    {

        [System.Runtime.Serialization.EnumMember(Value = @"appointment-count")]
        AppointmentCount = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"born-on")]
        BornOn = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Items4Kind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"searchresults#disqualified-officer")]
        Searchresults_disqualifiedOfficer = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Description_identifiers2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"born-on")]
        BornOn = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Kind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"search#alphabetical-dissolved")]
        Search_alphabeticalDissolved = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"search#dissolved")]
        Search_dissolved = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"search#previous-name-dissolved")]
        Search_previousNameDissolved = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Top_hit : Schema5
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Kind2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"search#alphabetical-search")]
        Search_alphabeticalSearch = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"search#enhanced-search")]
        Search_enhancedSearch = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Top_hit2 : Schema6
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Kind3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"search#advanced-search")]
        Search_advancedSearch = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Top_hit3 : Schema7
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Former_names2
    {
        /// <summary>
        /// Former forenames of the officer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("forenames", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Forenames { get; set; }

        /// <summary>
        /// Former surnames of the officer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surname", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Surname { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Items5Officer_role
    {

        [System.Runtime.Serialization.EnumMember(Value = @"cic-manager")]
        CicManager = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"corporate-director")]
        CorporateDirector = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"corporate-llp-designated-member")]
        CorporateLlpDesignatedMember = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"corporate-llp-member")]
        CorporateLlpMember = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"corporate-managing-officer")]
        CorporateManagingOfficer = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"corporate-member-of-a-management")]
        CorporateMemberOfAManagement = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"corporate-member-of-a-supervisory-organ")]
        CorporateMemberOfASupervisoryOrgan = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"corporate-member-of-an-administrative-organ")]
        CorporateMemberOfAnAdministrativeOrgan = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"corporate-nominee-director")]
        CorporateNomineeDirector = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"corporate-nominee-secretary")]
        CorporateNomineeSecretary = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"corporate-secretary")]
        CorporateSecretary = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"director")]
        Director = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"judicial-factor")]
        JudicialFactor = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"llp-designated-member")]
        LlpDesignatedMember = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"llp-member")]
        LlpMember = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"managing-officer")]
        ManagingOfficer = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"member-of-a-management")]
        MemberOfAManagement = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"member-of-a-supervisory-organ")]
        MemberOfASupervisoryOrgan = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"member-of-an-administrative-organ")]
        MemberOfAnAdministrativeOrgan = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"nominee-director")]
        NomineeDirector = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"nominee-secretary")]
        NomineeSecretary = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"receiver-and-manager")]
        ReceiverAndManager = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"secretary")]
        Secretary = 22,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CasesType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"compulsory-liquidation")]
        CompulsoryLiquidation = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"creditors-voluntary-liquidation")]
        CreditorsVoluntaryLiquidation = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"members-voluntary-liquidation")]
        MembersVoluntaryLiquidation = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"in-administration")]
        InAdministration = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"corporate-voluntary-arrangement")]
        CorporateVoluntaryArrangement = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"corporate-voluntary-arrangement-moratorium")]
        CorporateVoluntaryArrangementMoratorium = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"administration-order")]
        AdministrationOrder = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"receiver-manager")]
        ReceiverManager = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"administrative-receiver")]
        AdministrativeReceiver = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"receivership")]
        Receivership = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"foreign-insolvency")]
        ForeignInsolvency = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"moratorium")]
        Moratorium = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Dates
    {
        /// <summary>
        /// Describes what date is represented by the associated `date` element.
        /// <br/> For enumeration descriptions see `insolvency_case_date_type` section in the [enumeration mappings] (https://github.com/companieshouse/api-enumerations/blob/master/constants.yml).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DatesType Type { get; set; }

        /// <summary>
        /// The case date, described by `date_type`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Practitioners
    {
        /// <summary>
        /// The name of the practitioner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The practitioners' address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Address> Address { get; set; } = new System.Collections.ObjectModel.Collection<Address>();

        /// <summary>
        /// The date the practitioner was appointed on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("appointed_on", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Appointed_on { get; set; }

        /// <summary>
        /// The date the practitioner ceased to act for the case.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ceased_to_act_on", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Ceased_to_act_on { get; set; }

        /// <summary>
        /// The type of role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PractitionersRole Role { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Items7Description
    {

        [System.Runtime.Serialization.EnumMember(Value = @"super-secure-persons-with-significant-control")]
        SuperSecurePersonsWithSignificantControl = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Items7Kind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"individual-person-with-significant-control")]
        IndividualPersonWithSignificantControl = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"corporate-entity-person-with-significant-control")]
        CorporateEntityPersonWithSignificantControl = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"legal-person-with-significant-control")]
        LegalPersonWithSignificantControl = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"super-secure-person-with-significant-control")]
        SuperSecurePersonWithSignificantControl = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"individual-beneficial-owner")]
        IndividualBeneficialOwner = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"corporate-entity-beneficial-owner")]
        CorporateEntityBeneficialOwner = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"legal-person-beneficial-owner")]
        LegalPersonBeneficialOwner = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"super-secure-beneficial-owner")]
        SuperSecureBeneficialOwner = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DatesType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"instrumented-on")]
        InstrumentedOn = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"administration-started-on")]
        AdministrationStartedOn = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"administration-discharged-on")]
        AdministrationDischargedOn = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"administration-ended-on")]
        AdministrationEndedOn = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"concluded-winding-up-on")]
        ConcludedWindingUpOn = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"petitioned-on")]
        PetitionedOn = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ordered-to-wind-up-on")]
        OrderedToWindUpOn = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"due-to-be-dissolved-on")]
        DueToBeDissolvedOn = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"case-end-on")]
        CaseEndOn = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"wound-up-on")]
        WoundUpOn = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"voluntary-arrangement-started-on")]
        VoluntaryArrangementStartedOn = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"voluntary-arrangement-ended-on")]
        VoluntaryArrangementEndedOn = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"moratorium-started-on")]
        MoratoriumStartedOn = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"moratorium-ended-on")]
        MoratoriumEndedOn = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"declaration-solvent-on")]
        DeclarationSolventOn = 14,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address
    {
        /// <summary>
        /// The first line of the address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address_line_1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address_line_1 { get; set; }

        /// <summary>
        /// The second line of the address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address_line_2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address_line_2 { get; set; }

        /// <summary>
        /// The locality. For example London.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locality", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locality { get; set; }

        /// <summary>
        /// The region. For example Surrey.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("region", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Region { get; set; }

        /// <summary>
        /// The postal code. For example CF14 3UZ.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postal_code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Postal_code { get; set; }

        /// <summary>
        /// The country.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PractitionersRole
    {

        [System.Runtime.Serialization.EnumMember(Value = @"final-liquidator")]
        FinalLiquidator = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"receiver")]
        Receiver = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"receiver-manager")]
        ReceiverManager = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"proposed-liquidator")]
        ProposedLiquidator = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"provisional-liquidator")]
        ProvisionalLiquidator = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"administrative-receiver")]
        AdministrativeReceiver = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"practitioner")]
        Practitioner = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"interim-liquidator")]
        InterimLiquidator = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603